/*
 * This file was automatically generated by EvoSuite
 * Wed May 07 10:18:40 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Btt;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Btt_ESTest extends Btt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Btt btt0 = new Btt();
      LocalDate localDate0 = MockLocalDate.ofYearDay(499, 4);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("dE'?", "r)W4", "dE'?", (-734), 499, (-734), localDate0, 'L');
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorPraticanteOcasional0, (-387.1864));
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals((-3517.5), btt1.getDistancia(), 0.01);
      assertEquals(0.0, btt1.getAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      Btt btt0 = new Btt(localDateTime0, localTime0, (-776), (-776), (-776));
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, "", "", (-2145287856), (-2006), (-2146637331), localDate0, '{');
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorAmador0, (-776));
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(0.0, btt1.getDistancia(), 0.01);
      assertEquals(0.0, btt1.getAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Btt btt0 = new Btt();
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
      
      btt0.setAltimetria(2000.0);
      double double0 = btt0.getFatorHard();
      assertEquals(1.1500000000000001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setAltimetria(1000.0);
      double double0 = btt0.getFatorHard();
      assertEquals(1.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setProximoCodigo(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorProfissional0, Double.NaN);
      assertEquals(0.0, btt1.getDistancia(), 0.01);
      assertTrue(btt1.equals((Object)btt0));
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Btt btt0 = new Btt(localDateTime0, localTime0, (-1636), (-1636), (-1636));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      btt0.setProximoCodigo((-1636));
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorProfissional0, (-1636));
      assertEquals((-2.2548578304E10), btt1.getDistancia(), 0.01);
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Btt btt0 = new Btt(localDateTime0, localTime0, (-1025), (-1025), (-189.99923905508));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = btt0.consumoCalorias(utilizadorAmador0);
      assertEquals(-0.0, double0, 0.01);
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.from(offsetDateTime0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(5272L);
      Btt btt0 = new Btt(localDateTime0, localTime0, 3, 3, 674.46561594);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      System.setCurrentTimeMillis(3);
      double double0 = btt0.consumoCalorias(utilizadorProfissional0);
      assertEquals(16.590789931050793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Btt btt0 = new Btt(localDateTime0, localTime0, (-1025), (-1025), (-189.99923905508));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setDataNascimento(localDate0);
      double double0 = btt0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals((-1570.4129177541738), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt(btt0);
      btt0.setDataRealizacao((LocalDateTime) null);
      // Undeclared exception!
      try { 
        btt0.equals(btt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Btt btt0 = new Btt();
      // Undeclared exception!
      try { 
        btt0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Btt", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Btt btt0 = new Btt();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        btt0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Btt btt0 = null;
      try {
        btt0 = new Btt((Btt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt(btt0);
      boolean boolean0 = btt0.equals(btt1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Btt btt0 = new Btt();
      boolean boolean0 = btt0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Btt btt0 = new Btt();
      boolean boolean0 = btt0.equals(btt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(0L);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Btt btt0 = new Btt(localDateTime0, localTime0, (-1025), (-1025), 0L);
      boolean boolean0 = btt0.equals(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setAltimetria(2367L);
      double double0 = btt0.getFatorHard();
      assertEquals(1.2500000000000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Btt btt0 = new Btt();
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
      
      btt0.setAltimetria(1278.169804855993);
      double double0 = btt0.getFatorHard();
      assertEquals(1.1500000000000001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Month month0 = Month.NOVEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(19, month0, 19, 19, 19, 5);
      Btt btt0 = new Btt(localDateTime0, (LocalTime) null, (-503), 0.4, 5);
      Object object0 = btt0.clone();
      assertNotSame(object0, btt0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Month month0 = Month.NOVEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(19, month0, 19, 19, 19, 5);
      Btt btt0 = new Btt(localDateTime0, (LocalTime) null, (-503), 0.4, 5);
      // Undeclared exception!
      try { 
        btt0.geraAtividade((Utilizador) null, 578);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Btt", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, (-1182), (-1182), (-1182));
      // Undeclared exception!
      try { 
        btt0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Btt btt0 = new Btt();
      String string0 = btt0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n", string0);
  }
}
