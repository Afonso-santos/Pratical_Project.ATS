/*
 * This file was automatically generated by EvoSuite
 * Wed May 07 10:19:31 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Atividade;
import Projeto.BenchPress;
import Projeto.BicepCurls;
import Projeto.LegPress;
import Projeto.PlanoTreino;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LegPress_ESTest extends LegPress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      assertEquals(0, legPress0.getFreqCardiaca());
      
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      BenchPress benchPress0 = new BenchPress();
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.addAtividade(legPress0, 1073741824);
      utilizadorProfissional0.addPlanoTreino(planoTreino0);
      BenchPress benchPress1 = new BenchPress(benchPress0);
      legPress0.compareTo((Atividade) benchPress1);
      double double0 = 3624.194275667;
      // Undeclared exception!
      legPress0.geraAtividade(utilizadorProfissional0, 3624.194275667);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setPeso(0.5);
      legPress0.equals(legPress0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setPeso(0.5);
      utilizadorProfissional0.addAtividade(legPress0);
      Atividade atividade0 = legPress0.geraAtividade(utilizadorProfissional0, 0.5);
      atividade0.setProximoCodigo(483);
      legPress0.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setPeso((-0.03935116525345084));
      legPress0.equals(legPress0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.addAtividade(legPress0);
      legPress0.geraAtividade(utilizadorProfissional0, (-0.03935116525345084));
      legPress0.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      MockClock.tickSeconds(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      LegPress legPress1 = new LegPress(localDateTime0, localTime0, 1283, 0, 1L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.setProximoCodigo(1283);
      double double0 = legPress1.consumoCalorias(utilizadorAmador0);
      assertEquals(Double.NaN, double0, 0.01);
      
      utilizadorAmador0.addAtividade(legPress1);
      boolean boolean0 = legPress0.equals(legPress1);
      assertFalse(boolean0);
      
      legPress1.toString();
      System.setCurrentTimeMillis(0);
      LegPress legPress2 = (LegPress)legPress1.geraAtividade(utilizadorAmador0, (-291.78861262084));
      assertEquals(0.8, legPress2.getPeso(), 0.01);
      assertEquals(0, legPress2.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setPeso(0.5);
      boolean boolean0 = legPress0.equals(legPress0);
      assertTrue(boolean0);
      
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.addAtividade(legPress0);
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorProfissional0, 0.5);
      assertEquals(0, legPress1.getRepeticoes());
      assertEquals(0.4, legPress1.getPeso(), 0.01);
      assertFalse(legPress1.equals((Object)legPress0));
      
      String string0 = legPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.5 kilos\nTipo de atividade: Leg press\n", string0);
      assertFalse(legPress0.equals((Object)legPress1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(legPress0);
      assertTrue(legPress1.equals((Object)legPress0));
      
      LocalTime localTime0 = MockLocalTime.now();
      legPress0.setTempo((LocalTime) null);
      legPress1.toString();
      legPress1.toString();
      LegPress legPress2 = new LegPress();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.setEmail("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n");
      legPress1.setProximoCodigo((-1));
      legPress1.clone();
      legPress1.equals(localTime0);
      legPress1.geraAtividade(utilizadorAmador0, 325.5616676744);
      LegPress legPress3 = new LegPress();
      legPress0.equals((Object) null);
      boolean boolean0 = legPress1.equals((Object) null);
      assertFalse(legPress1.equals((Object)legPress0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 7, (-1), (-2392.87889));
      String string0 = legPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 7 bpm\nRepeti\u00E7oes: -1\nPeso: -2392.87889 kilos\nTipo de atividade: Leg press\n", string0);
      
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 7 bpm\nRepeti\u00E7oes: -1\nPeso: -2392.87889 kilos\nTipo de atividade: Leg press\n", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 7 bpm\nRepeti\u00E7oes: -1\nPeso: -2392.87889 kilos\nTipo de atividade: Leg press\n", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 7 bpm\nRepeti\u00E7oes: -1\nPeso: -2392.87889 kilos\nTipo de atividade: Leg press\n", 32, 1, 4, localDate0, '`');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      double double0 = legPress0.consumoCalorias(utilizadorAmador1);
      assertEquals((-56649.10430864027), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LocalTime localTime0 = MockLocalTime.now();
      legPress0.setTempo((LocalTime) null);
      legPress0.toString();
      legPress0.toString();
      LegPress legPress1 = new LegPress();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.setEmail("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: null\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n");
      Object object0 = legPress0.clone();
      legPress0.equals(localTime0);
      legPress0.geraAtividade(utilizadorAmador0, 325.5616676744);
      LegPress legPress2 = new LegPress();
      // Undeclared exception!
      try { 
        legPress0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(legPress0);
      LocalTime localTime0 = MockLocalTime.now();
      legPress1.setTempo(localTime0);
      legPress1.toString();
      String string0 = legPress1.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n", string0);
      
      legPress0.clone();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.setEmail("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n");
      Object object0 = legPress1.clone();
      legPress0.equals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n");
      legPress1.equals(localTime0);
      legPress1.geraAtividade(utilizadorAmador0, 325.5616676744);
      LegPress legPress2 = (LegPress)legPress0.clone();
      legPress2.setProximoCodigo(0);
      legPress0.equals((Object) null);
      legPress1.clone();
      boolean boolean0 = legPress1.equals((Object) null);
      assertFalse(boolean0);
      
      LegPress legPress3 = (LegPress)legPress1.geraAtividade(utilizadorAmador0, (-1567.0));
      assertNotSame(legPress1, object0);
      assertTrue(legPress3.equals((Object)legPress0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1L);
      legPress0.setProximoCodigo((-1173));
      LegPress legPress1 = new LegPress(localDateTime0, localTime0, 1259, 0, 1L);
      legPress1.setPeso((-291.7886126208359));
      boolean boolean0 = legPress0.equals(legPress1);
      assertFalse(boolean0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1441));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("-<JE", "-<JE", "BO+e([#*?x?*", 1259, 1259, (-1441), localDate0, '|');
      double double0 = legPress1.consumoCalorias(utilizadorProfissional0);
      assertEquals(0.13341480814058096, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1L);
      int int0 = 1264;
      LegPress legPress1 = new LegPress(localDateTime0, localTime0, 1264, 0, 1L);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      legPress1.consumoCalorias(utilizadorAmador0);
      legPress1.setPeso((-291.7886126208359));
      legPress0.equals(legPress1);
      String string0 = "-<JE";
      String string1 = "BO+e([#\\*?x?*";
      legPress1.toString();
      legPress1.consumoCalorias(utilizadorAmador0);
      int int1 = (-1441);
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(1264, 1264);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 1264
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.equals(legPress0);
      LegPress legPress1 = new LegPress(legPress0);
      legPress1.clone();
      String string0 = "Projeto.AtivDistancia";
      int int0 = (-1);
      int int1 = 0;
      int int2 = 328;
      // Undeclared exception!
      try { 
        MockLocalDate.of(328, 328, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 328
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      Object object0 = legPress0.clone();
      legPress0.equals(object0);
      assertNotSame(object0, legPress0);
      
      Instant instant0 = MockInstant.ofEpochSecond((long) 464, 0L);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.fixed(instant0, zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "5;\"BVvWA,I2\"B+", 464, 464, 0, localDate0, 'l');
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorAmador0, 464);
      assertEquals(464.0, legPress1.getPeso(), 0.01);
      assertEquals(515, legPress1.getRepeticoes());
      
      LegPress legPress2 = (LegPress)legPress0.geraAtividade(utilizadorAmador0, 0.0);
      assertNotSame(legPress0, object0);
      assertFalse(legPress2.equals((Object)legPress1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(0, 0, 2);
      int int0 = (-1);
      LegPress legPress0 = new LegPress((LocalDateTime) null, localTime0, (-1), 0, (-1));
      legPress0.setTempo(localTime0);
      legPress0.setPeso(4720.649);
      // Undeclared exception!
      try { 
        legPress0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      // Undeclared exception!
      try { 
        legPress0.geraAtividade((Utilizador) null, 2118.6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.LegPress", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setPeso(1.15);
      utilizadorProfissional0.getIdade();
      utilizadorProfissional0.setAltura(0);
      legPress0.geraAtividade(utilizadorProfissional0, 0.0);
      legPress0.geraAtividade(utilizadorProfissional0, 0.0);
      legPress0.equals((Object) null);
      LocalDate localDate0 = null;
      // Undeclared exception!
      try { 
        utilizadorProfissional0.totalCaloriasDispendidas((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, (LocalTime) null, 0, 0, 0);
      boolean boolean0 = legPress0.equals(bicepCurls0);
      assertFalse(boolean0);
      
      String string0 = legPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n", string0);
      
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n", "<VffbUQM", 0, (-1767), 2445, localDate0, '8');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(852);
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorAmador0, 0);
      assertEquals((-1767.0), legPress1.getPeso(), 0.01);
      assertEquals(0, legPress1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(legPress0);
      LegPress legPress2 = new LegPress();
      Object object0 = legPress2.clone();
      legPress2.toString();
      legPress1.equals(object0);
      legPress2.toString();
      Utilizador utilizador0 = null;
      legPress1.compareTo((Atividade) legPress2);
      // Undeclared exception!
      try { 
        legPress1.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.LegPress", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LegPress legPress0 = new LegPress((LocalDateTime) null, localTime0, 0, 0, 0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        legPress0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      // Undeclared exception!
      try { 
        legPress0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.LegPress", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(legPress0);
      legPress1.toString();
      boolean boolean0 = legPress1.equals(legPress0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(96L, 1536, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(96L);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 1536, 0, 1536);
      boolean boolean0 = legPress0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LegPress legPress0 = null;
      try {
        legPress0 = new LegPress((LegPress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setProximoCodigo(0);
      LegPress legPress1 = new LegPress(legPress0);
      String string0 = legPress1.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Atividade atividade0 = legPress0.geraAtividade(utilizadorProfissional0, (-0.2));
      assertTrue(atividade0.equals((Object)legPress0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", (-2429), (-2429), (-2429), localDate0, '*');
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorPraticanteOcasional0, '*');
      assertEquals((-2429.0), legPress1.getPeso(), 0.01);
      assertEquals((-4), legPress1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LocalTime localTime0 = MockLocalTime.now();
      legPress0.equals(localTime0);
      boolean boolean0 = legPress0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now();
      LegPress legPress1 = new LegPress(localDateTime0, localTime0, 1283, 1283, (-17L));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = legPress1.consumoCalorias(utilizadorAmador0);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = legPress0.equals(legPress1);
      assertFalse(boolean0);
      
      String string0 = legPress1.toString();
      assertEquals("Atividade\nId: 2\nData e hora: 14/02/2014 02:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 1283 bpm\nRepeti\u00E7oes: 1283\nPeso: -17.0 kilos\nTipo de atividade: Leg press\n", string0);
  }
}
