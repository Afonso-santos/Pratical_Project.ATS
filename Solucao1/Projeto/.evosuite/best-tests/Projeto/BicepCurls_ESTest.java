/*
 * This file was automatically generated by EvoSuite
 * Wed May 07 10:18:00 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Atividade;
import Projeto.BicepCurls;
import Projeto.Flexoes;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.chrono.ThaiBuddhistDate;
import java.time.format.DateTimeFormatter;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BicepCurls_ESTest extends BicepCurls_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-13));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("<]@SjWY>='\"A", (String) null, "<]@SjWY>='\"A", (-13), (-13), (-13), localDate0, '>');
      utilizadorProfissional0.totalCaloriasDispendidas(localDate0, localDate0);
      bicepCurls0.geraAtividade(utilizadorProfissional0, '>');
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.equals(bicepCurls0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.equals((Object) null);
      Object object0 = bicepCurls0.clone();
      bicepCurls0.equals(object0);
      bicepCurls0.consumoCalorias((Utilizador) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 13, 13, 13);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.addAtividade(bicepCurls0);
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorProfissional0, 0.5);
      bicepCurls0.equals(localTime0);
      bicepCurls0.consumoCalorias(utilizadorProfissional0);
      Double double0 = new Double(Double.NaN);
      atividade0.toString();
      bicepCurls0.geraAtividade(utilizadorProfissional0, Double.NaN);
      atividade0.consumoCalorias(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.clone();
      bicepCurls0.geraAtividade((Utilizador) null, 0.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.toString();
      bicepCurls0.toString();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-648));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bicep curls\n", (-648), (-648), (-648), localDate0, 'R');
      bicepCurls0.geraAtividade(utilizadorAmador0, 0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      Object object0 = bicepCurls0.clone();
      bicepCurls1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      bicepCurls1.clone();
      Flexoes flexoes0 = new Flexoes();
      Flexoes flexoes1 = new Flexoes(flexoes0);
      bicepCurls0.equals(flexoes1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.consumoCalorias((Utilizador) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      String string0 = "nO;";
      String string1 = "$%fH{";
      int int0 = 3;
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "nO;", "$%fH{", 3, 3, 3, (LocalDate) null, '1');
      bicepCurls0.setPeso(3);
      bicepCurls0.consumoCalorias(utilizadorPraticanteOcasional0);
      bicepCurls0.clone();
      int int1 = (-161);
      int int2 = 365;
  }

  //@Test(timeout = 4000)
  //public void test10()  throws Throwable  {
  //    //BicepCurls bicepCurls0 = new BicepCurls((BicepCurls) null);
  //    UtilizadorAmador utilizadorAmador0 = null;
  //    try {
  //      utilizadorAmador0 = new UtilizadorAmador();
  //      fail("Expecting exception: NullPointerException");
  //    
  //    } catch(NullPointerException e) {
  //       //
  //       // no message in exception (getMessage() returned null)
  //       //
  //       verifyException("Projeto.Atividade", e);
  //    }
  //}

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      bicepCurls0.geraAtividade(utilizadorProfissional0, 1158.6731193);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, (LocalTime) null, 0, 0, 0);
      bicepCurls0.toString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls((LocalDateTime) null, localTime0, 0, 461, 0);
      bicepCurls0.clone();
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      BicepCurls bicepCurls2 = new BicepCurls(bicepCurls1);
      Object object0 = bicepCurls1.clone();
      bicepCurls2.equals(object0);
      bicepCurls1.toString();
      bicepCurls0.clone();
  }

  //@Test(timeout = 4000)
  //public void test14()  throws Throwable  {
  //    BicepCurls bicepCurls0 = new BicepCurls();
  //    Flexoes flexoes0 = new Flexoes();
  //    BicepCurls bicepCurls1 = new BicepCurls();
  //    flexoes0.equals(bicepCurls1);
  //    flexoes0.compareTo((Atividade) bicepCurls0);
  //    Flexoes flexoes1 = new Flexoes(flexoes0);
  //    bicepCurls0.compareTo((Atividade) flexoes1);
  //    bicepCurls0.equals((Object) null);
  //    bicepCurls0.clone();
  //    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
  //    ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now((ZoneId) zoneOffset0);
  //    LocalDateTime localDateTime0 = MockLocalDateTime.from(thaiBuddhistDate0);
  //    // Undeclared exception!
  //    try { 
  //      bicepCurls0.setDataRealizacao(localDateTime0);
  //      fail("Expecting exception: DateTimeException");
  //    
  //    } catch(DateTimeException e) {
  //       //
  //       // Unable to obtain LocalDateTime from TemporalAccessor: ThaiBuddhist BE 2557-02-14 of type java.time.chrono.ThaiBuddhistDate
  //       //
  //       verifyException("java.time.LocalDateTime", e);
  //    }
  //}

  //@Test(timeout = 4000)
  //public void test15()  throws Throwable  {
  //    LocalDateTime localDateTime0 = MockLocalDateTime.now();
  //    int int0 = 1;
  //    int int1 = (-386);
  //    BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, (LocalTime) null, 1, (-386), (-386));
  //    String string0 = "";
  //    String string1 = "6U>_V;&fs#id+$Gi";
  //    String string2 = "bsmXec.";
  //    LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
  //    UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "6U>_V;&fs#id+$Gi", "bsmXec.", (-386), 1, 1, localDate0, '6');
  //    bicepCurls0.consumoCalorias(utilizadorAmador0);
  //    char char0 = 'v';
  //    bicepCurls0.consumoCalorias(utilizadorAmador0);
  //    UtilizadorProfissional utilizadorProfissional0 = null;
  //    try {
  //      utilizadorProfissional0 = new UtilizadorProfissional(string0, string0, string2, int0, int1, int1, localDate0, char0);
  //      fail("Expecting exception: NullPointerException");
  //    
  //    } catch(NullPointerException e) {
  //       //
  //       // no message in exception (getMessage() returned null)
  //       //
  //       verifyException("Projeto.AtivRepeticoes", e);
  //    }
  //}

  //@Test(timeout = 4000)
  //public void test16()  throws Throwable  {
  //    LocalDateTime localDateTime0 = null;
  //    int int0 = 4;
  //    int int1 = 1;
  //    BicepCurls bicepCurls0 = new BicepCurls((LocalDateTime) null, (LocalTime) null, 4, 1, 1);
  //    BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
  //    bicepCurls1.toString();
  //    UtilizadorProfissional utilizadorProfissional0 = null;
  //    try {
  //      utilizadorProfissional0 = new UtilizadorProfissional();
  //      fail("Expecting exception: NullPointerException");
  //    
  //    } catch(NullPointerException e) {
  //       //
  //       // no message in exception (getMessage() returned null)
  //       //
  //       verifyException("Projeto.Atividade", e);
  //    }
  //}

  //@Test(timeout = 4000)
  //public void test17()  throws Throwable  {
  //    Clock clock0 = MockClock.systemDefaultZone();
  //    LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
  //    LocalTime localTime0 = MockLocalTime.now();
  //    BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 0, 4, 4);
  //    UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
  //    utilizadorProfissional0.setGenero('>');
  //    bicepCurls0.geraAtividade(utilizadorProfissional0, 0.5);
  //    bicepCurls0.equals(localTime0);
  //    bicepCurls0.toString();
  //    bicepCurls0.consumoCalorias(utilizadorProfissional0);
  //    double double0 = 0.22;
  //    bicepCurls0.geraAtividade(utilizadorProfissional0, double0);
  //    double double1 = (-771.0);
  //    // Undeclared exception!
  //    try { 
  //      bicepCurls0.geraAtividade(utilizadorProfissional0, double1);
  //      fail("Expecting exception: ArithmeticException");
  //    
  //    } catch(ArithmeticException e) {
  //       //
  //       // / by zero
  //       //
  //       verifyException("Projeto.Atividade", e);
  //    }
  //}

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(2156L);
      BicepCurls bicepCurls0 = new BicepCurls((LocalDateTime) null, localTime0, 0, 2570, 1000.0);
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      Double double0 = new Double((-714.0));
      bicepCurls1.setPeso(1294.239979315065);
      Double.sum(0.0, 716.9128177);
      Double.isFinite(0.0);
      Double.isFinite(0);
      Double.isFinite(2570);
      bicepCurls1.equals(double0);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, (String) null, "", 0, 532, 0, localDate0, 'V');
      bicepCurls1.consumoCalorias(utilizadorAmador0);
      bicepCurls0.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "\nTipo de atividade: Bicep curls\n", "+f17!|4x]/t;\"b7&KwH", 1, 1, 1, localDate0, '');
      bicepCurls0.geraAtividade(utilizadorPraticanteOcasional0, (-873.38));
      bicepCurls0.clone();
      bicepCurls0.setFreqCardiaca(1);
      bicepCurls0.clone();
  }

  //@Test(timeout = 4000)
  //public void test20()  throws Throwable  {
  //    BicepCurls bicepCurls0 = new BicepCurls();
  //    bicepCurls0.toString();
  //    bicepCurls0.compareTo((Atividade) bicepCurls0);
  //    bicepCurls0.equals(bicepCurls0);
  //    UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
  //    //LocalDate localDate0 = MockLocalDate.ofYearDay(0, (-4009));
  //    // Undeclared exception!
  //    try { 
  //      utilizadorProfissional0.planoTreinoMaisCalorias(localDate0, localDate0);
  //      fail("Expecting exception: DateTimeException");
  //    
  //    } catch(DateTimeException e) {
  //       //
  //       // Invalid value for DayOfYear (valid values 1 - 365/366): -4009
  //       //
  //       verifyException("java.time.temporal.ValueRange", e);
  //    }
  //}

  //@Test(timeout = 4000)
  //public void test21()  throws Throwable  {
  //    Clock clock0 = MockClock.systemDefaultZone();
  //    LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
  //    LocalTime localTime0 = MockLocalTime.now();
  //    BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 13, 4, 4);
  //    UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
  //    utilizadorProfissional0.setGenero('>');
  //    bicepCurls0.geraAtividade(utilizadorProfissional0, 0.5);
  //    bicepCurls0.equals(localTime0);
  //    bicepCurls0.toString();
  //    bicepCurls0.consumoCalorias(utilizadorProfissional0);
  //    bicepCurls0.consumoCalorias((Utilizador) null);
  //    double double0 = 0.22;
  //    bicepCurls0.geraAtividade(utilizadorProfissional0, double0);
  //    double double1 = (-771.0);
  //    bicepCurls0.geraAtividade(utilizadorProfissional0, double1);
  //    // Undeclared exception!
  //    try { 
  //      bicepCurls0.consumoCalorias(utilizadorProfissional0);
  //      fail("Expecting exception: NullPointerException");
  //    
  //    } catch(NullPointerException e) {
  //       //
  //       // no message in exception (getMessage() returned null)
  //       //
  //       verifyException("Projeto.BicepCurls", e);
  //    }
  //}

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 13, 13, 13);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setGenero('>');
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorProfissional0, 0.5);
      bicepCurls0.equals(localTime0);
      bicepCurls0.toString();
      bicepCurls0.consumoCalorias(utilizadorProfissional0);
      atividade0.toString();
      utilizadorProfissional0.setPeso(0.5);
      Atividade atividade1 = bicepCurls0.geraAtividade(utilizadorProfissional0, 0.22);
      BicepCurls bicepCurls1 = new BicepCurls();
      bicepCurls0.consumoCalorias(utilizadorProfissional0);
      atividade1.consumoCalorias(utilizadorProfissional0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 13, 13, 13);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorProfissional0, 0.5);
      bicepCurls0.equals(localTime0);
      bicepCurls0.toString();
      bicepCurls0.consumoCalorias(utilizadorProfissional0);
      atividade0.toString();
      bicepCurls0.geraAtividade(utilizadorProfissional0, 0.22);
      bicepCurls0.geraAtividade(utilizadorProfissional0, (-771.0));
      bicepCurls0.consumoCalorias(utilizadorProfissional0);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("]_O2~Z[bL_Hmy+hYkj", "mv", "kZD0<3}\nFkZ6`?Oi", 13, 13, (-1378), localDate0, 'X');
      Period period0 = Period.of((-2152), 13, 3145);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0, localDate1, localDate1);
      bicepCurls0.consumoCalorias(utilizadorPraticanteOcasional1);
      bicepCurls0.clone();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 13, 4, 4);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setGenero('>');
      utilizadorProfissional0.addAtividade(bicepCurls0);
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorProfissional0, 0.5);
      bicepCurls0.equals(localTime0);
      bicepCurls0.toString();
      bicepCurls0.consumoCalorias(utilizadorProfissional0);
      double double0 = new Double(0.5);
      atividade0.toString();
      bicepCurls0.geraAtividade(utilizadorProfissional0, 0.22);
      Atividade atividade1 = bicepCurls0.geraAtividade(utilizadorProfissional0, (-771.0));
      atividade1.geraAtividade(utilizadorProfissional0, (-615.81665509));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 13, 13, 13);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setGenero('>');
      utilizadorProfissional0.addAtividade(bicepCurls0);
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorProfissional0, 0.5);
      bicepCurls0.equals(localTime0);
      bicepCurls0.toString();
      bicepCurls0.consumoCalorias(utilizadorProfissional0);
      Double double0 = new Double(0.5);
      atividade0.toString();
      bicepCurls0.geraAtividade(utilizadorProfissional0, 0.22);
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorProfissional0, (-771.0));
      bicepCurls1.setPeso(13);
      bicepCurls1.geraAtividade(utilizadorProfissional0, (-615.81665509));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 13, (-5872), (-5872));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setGenero('>');
      utilizadorProfissional0.addAtividade(bicepCurls0);
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorProfissional0, 0.5);
      bicepCurls0.equals(localTime0);
      bicepCurls0.toString();
      double double0 = new Double((-5872));
      Double double1 = new Double(0.5);
      atividade0.toString();
      bicepCurls0.geraAtividade(utilizadorProfissional0, 0.22);
      Atividade atividade1 = bicepCurls0.geraAtividade(utilizadorProfissional0, (-771.0));
      atividade1.clone();
      atividade1.geraAtividade(utilizadorProfissional0, (-615.81665509));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      Object object0 = bicepCurls0.clone();
      bicepCurls0.equals(object0);
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      bicepCurls1.setFreqCardiaca((-1));
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LocalDate localDate1 = MockLocalDate.from(localDate0);
      bicepCurls0.setProximoCodigo((-13));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("<]@SjWY>='\"A", (String) null, "<]@SjWY>='\"A", (-13), (-13), (-13), localDate1, '>');
      utilizadorProfissional0.totalCaloriasDispendidas(localDate1, localDate1);
      Atividade atividade0 = bicepCurls1.geraAtividade(utilizadorProfissional0, (-3630.7915352));
      atividade0.compareTo((Atividade) bicepCurls0);
  }
}
