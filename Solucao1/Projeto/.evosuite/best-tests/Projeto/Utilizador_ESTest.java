/*
 * This file was automatically generated by EvoSuite
 * Wed May 07 08:57:02 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.Atividade;
import Projeto.BenchPress;
import Projeto.BicepCurls;
import Projeto.Ciclismo;
import Projeto.Flexoes;
import Projeto.LegPress;
import Projeto.PlanoTreino;
import Projeto.Trail;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.OffsetDateTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.HijrahDate;
import java.time.chrono.IsoChronology;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      LocalDate localDate0 = MockLocalDate.from(offsetDateTime0);
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0, localDate0, localDate0);
      utilizadorProfissional1.setGenero('s');
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals('s', utilizadorProfissional1.getGenero());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = (UtilizadorProfissional)utilizadorProfissional0.clone();
      utilizadorProfissional1.setAltura((-702));
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals((-702), utilizadorProfissional1.getAltura());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Period period0 = Period.ofMonths((-352));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "Projeto.Corrida", "", (-352), 0, 1, localDate0, '*');
      UtilizadorAmador utilizadorAmador1 = (UtilizadorAmador)utilizadorAmador0.utilizadorNumPeriodo(localDate0, localDate0);
      assertEquals((-352), utilizadorAmador1.getFreqCardiaca());
      
      utilizadorAmador1.setFreqCardiaca(0);
      boolean boolean0 = utilizadorAmador0.equals(utilizadorAmador1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, (-671), 896, (-671), localDate0, '+');
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0, localDate0, localDate0);
      utilizadorPraticanteOcasional0.setCodUtilizador((-2734));
      boolean boolean0 = utilizadorPraticanteOcasional0.equals(utilizadorPraticanteOcasional1);
      assertEquals((-2734), utilizadorPraticanteOcasional0.getCodUtilizador());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Month month0 = Month.JUNE;
      LocalDate localDate0 = MockLocalDate.of(6, month0, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("^1dnx?", "", "^1dnx?", 1353, 6, 6, localDate0, 'T');
      double double0 = utilizadorPraticanteOcasional0.getBMR();
      assertEquals(1353, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('T', utilizadorPraticanteOcasional0.getGenero());
      assertEquals("^1dnx?", utilizadorPraticanteOcasional0.getNome());
      assertEquals(10137.5, double0, 0.01);
      assertEquals("^1dnx?", utilizadorPraticanteOcasional0.getEmail());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals("", utilizadorPraticanteOcasional0.getMorada());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Period period0 = Period.ofMonths(1626);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "Projeto.Btt", 1626, 1626, 1626, localDate0, '*');
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "Projeto.Btt", "", 1626, 0, 1, localDate0, '*');
      LocalDate localDate1 = MockLocalDate.ofEpochDay(2137L);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorProfissional0);
      BiFunction<Atividade, Utilizador, Ciclismo> biFunction0 = (BiFunction<Atividade, Utilizador, Ciclismo>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      utilizadorAmador0.infoDasAtividadesUtilizadorNumPeriodoQueRespeitamP(localDate1, localDate0, predicate0, biFunction0, (Utilizador) utilizadorProfissional0);
      assertEquals("Projeto.Btt", utilizadorAmador0.getMorada());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("", utilizadorProfissional0.getNome());
      assertEquals(1, utilizadorAmador0.getAltura());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(1626, utilizadorAmador0.getFreqCardiaca());
      assertEquals("Projeto.Btt", utilizadorProfissional0.getEmail());
      assertEquals('*', utilizadorAmador0.getGenero());
      assertEquals(2, utilizadorAmador0.getCodUtilizador());
      assertEquals(1626.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2379);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Period period0 = Period.ofDays((-1));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0);
      double double0 = utilizadorPraticanteOcasional0.allKmsDistancia(localDate1, localDate0);
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Period period0 = Period.ofMonths(70);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0);
      utilizadorProfissional0.numeroAtividades(localDate1, localDate0);
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional(" `)#P{pY6", "", "", 1211, (-1322), (-1), localDate0, 'E');
      PlanoTreino planoTreino0 = utilizadorPraticanteOcasional0.getPlanoTreinoId(1211);
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      assertEquals('E', utilizadorPraticanteOcasional0.getGenero());
      assertEquals((-1), utilizadorPraticanteOcasional0.getAltura());
      assertEquals("", utilizadorPraticanteOcasional0.getEmail());
      assertEquals(1211, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals((-1322.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(" `)#P{pY6", utilizadorPraticanteOcasional0.getNome());
      assertEquals("", utilizadorPraticanteOcasional0.getMorada());
      
      BicepCurls bicepCurls0 = new BicepCurls();
      utilizadorAmador0.addAtividadePlanoTreino(10, bicepCurls0, (-352));
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("wzqx<D", "", (String) null, (-3344), (-3344), 1588, localDate0, 'a');
      UtilizadorProfissional utilizadorProfissional1 = (UtilizadorProfissional)utilizadorProfissional0.utilizadorNumPeriodo(localDate0, localDate0);
      assertEquals((-3344), utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1588, utilizadorProfissional0.getAltura());
      assertEquals("wzqx<D", utilizadorProfissional1.getNome());
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
      assertEquals('a', utilizadorProfissional1.getGenero());
      assertEquals("", utilizadorProfissional1.getMorada());
      assertEquals(1588, utilizadorProfissional1.getAltura());
      assertEquals((-3344.0), utilizadorProfissional0.getPeso(), 0.01);
      assertEquals((-3344.0), utilizadorProfissional1.getPeso(), 0.01);
      assertEquals((-3344), utilizadorProfissional1.getFreqCardiaca());
      assertEquals(1, utilizadorProfissional1.getCodUtilizador());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      String string0 = utilizadorAmador0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Amador\n", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(82, 82);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, "dd/MM/yyyy", "Utilizador\nCodigo de Utilizador: ", 10, 0, 82, localDate0, 'B');
      double double0 = utilizadorAmador0.getPeso();
      assertEquals(10, utilizadorAmador0.getFreqCardiaca());
      assertEquals(82, utilizadorAmador0.getAltura());
      assertEquals('B', utilizadorAmador0.getGenero());
      assertEquals("Utilizador\nCodigo de Utilizador: ", utilizadorAmador0.getEmail());
      assertEquals(0.0, double0, 0.01);
      assertEquals("dd/MM/yyyy", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Month month0 = Month.JUNE;
      LocalDate localDate0 = MockLocalDate.of(6, month0, 6);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("^1dnx?", "", "^1dnx?", 1353, 6, 6, localDate0, 'T');
      double double0 = utilizadorPraticanteOcasional0.getPeso();
      assertEquals("^1dnx?", utilizadorPraticanteOcasional0.getEmail());
      assertEquals(1353, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals("^1dnx?", utilizadorPraticanteOcasional0.getNome());
      assertEquals(6, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals("", utilizadorPraticanteOcasional0.getMorada());
      assertEquals('T', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(6.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(82, 82);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, "dd/MM/yyyy", "Utilizador\nCodigo de Utilizador: ", 10, 0, 82, localDate0, 'B');
      String string0 = utilizadorAmador0.getNome();
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertNull(string0);
      assertEquals('B', utilizadorAmador0.getGenero());
      assertEquals("Utilizador\nCodigo de Utilizador: ", utilizadorAmador0.getEmail());
      assertEquals(10, utilizadorAmador0.getFreqCardiaca());
      assertEquals("dd/MM/yyyy", utilizadorAmador0.getMorada());
      assertEquals(82, utilizadorAmador0.getAltura());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("<dcvX&GZ^I!f", "3Y:y3'#!*p", "3Y:y3'#!*p", 6, 6, 6, (LocalDate) null, '*');
      String string0 = utilizadorProfissional0.getNome();
      assertEquals("3Y:y3'#!*p", utilizadorProfissional0.getMorada());
      assertEquals(6, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(6.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(6, utilizadorProfissional0.getAltura());
      assertEquals("3Y:y3'#!*p", utilizadorProfissional0.getEmail());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals('*', utilizadorProfissional0.getGenero());
      assertEquals("<dcvX&GZ^I!f", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay((-443), 70);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("b;_.:LvR30R;~.)AHDh", (String) null, (String) null, 6, 3, 2573, localDate0, '2');
      String string0 = utilizadorAmador0.getMorada();
      assertEquals('2', utilizadorAmador0.getGenero());
      assertEquals(2573, utilizadorAmador0.getAltura());
      assertEquals(3.0, utilizadorAmador0.getPeso(), 0.01);
      assertNull(string0);
      assertEquals(6, utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setMorada("T");
      utilizadorPraticanteOcasional0.getMorada();
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      int int0 = utilizadorAmador0.getIdade();
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, int0);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      System.setCurrentTimeMillis(0);
      int int0 = utilizadorPraticanteOcasional0.getIdade();
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals((-44), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      char char0 = utilizadorPraticanteOcasional0.getGenero();
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals('\u0000', char0);
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de Utilizador: Profissional\n", "\nTipo de Utilizador: Profissional\n", "K6>@y)%)_bSFLM", 5, 0, 5, localDate0, 'l');
      char char0 = utilizadorPraticanteOcasional0.getGenero();
      assertEquals(5, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("K6>@y)%)_bSFLM", utilizadorPraticanteOcasional0.getEmail());
      assertEquals('l', char0);
      assertEquals(5, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals("\nTipo de Utilizador: Profissional\n", utilizadorPraticanteOcasional0.getNome());
      assertEquals("\nTipo de Utilizador: Profissional\n", utilizadorPraticanteOcasional0.getMorada());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional(".T]?vr9(Ul;O", ".T]?vr9(Ul;O", "6kx<C)bANi\f-m/l", 50, (-1367), 77, localDate0, 'Z');
      int int0 = utilizadorPraticanteOcasional0.getFreqCardiaca();
      assertEquals(".T]?vr9(Ul;O", utilizadorPraticanteOcasional0.getMorada());
      assertEquals(".T]?vr9(Ul;O", utilizadorPraticanteOcasional0.getNome());
      assertEquals(50, int0);
      assertEquals('Z', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(77, utilizadorPraticanteOcasional0.getAltura());
      assertEquals((-1367.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("6kx<C)bANi\f-m/l", utilizadorPraticanteOcasional0.getEmail());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("/pn", "/pn", "Projeto.BicepCurls", (-2976), 0, (-2976), localDate0, '6');
      int int0 = utilizadorPraticanteOcasional0.getFreqCardiaca();
      assertEquals("/pn", utilizadorPraticanteOcasional0.getNome());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals("/pn", utilizadorPraticanteOcasional0.getMorada());
      assertEquals('6', utilizadorPraticanteOcasional0.getGenero());
      assertEquals((-2976), utilizadorPraticanteOcasional0.getAltura());
      assertEquals("Projeto.BicepCurls", utilizadorPraticanteOcasional0.getEmail());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals((-2976), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, (-671), 896, (-671), localDate0, '+');
      utilizadorPraticanteOcasional0.getFatorMultiplicativo();
      assertEquals((-671), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals((-671), utilizadorPraticanteOcasional0.getAltura());
      assertEquals('+', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(896.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, (-671), 896, (-671), localDate0, '+');
      utilizadorPraticanteOcasional0.getEmail();
      assertEquals('+', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(896.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals((-671), utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals((-671), utilizadorPraticanteOcasional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.getEmail();
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = utilizadorProfissional0.getDataNascimento();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        utilizadorAmador0.utilizadorNumPeriodo(localDate0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      int int0 = utilizadorAmador0.getCodUtilizador();
      assertEquals(0, int0);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, (-671), 896, (-671), localDate0, '+');
      utilizadorPraticanteOcasional0.setCodUtilizador((-2734));
      int int0 = utilizadorPraticanteOcasional0.getCodUtilizador();
      assertEquals((-2734), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = utilizadorAmador0.getBMR();
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(1221, 101);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("c(Y`*b_~!Dz\"", "c(Y`*b_~!Dz\"", "c(Y`*b_~!Dz\"", (-1344), (-1344), (-1344), localDate0, 'O');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(1221);
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      utilizadorAmador0.getAtividadesPlanoTreino();
      assertEquals((-1344), utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-1344.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals((-1344), utilizadorAmador0.getAltura());
      assertEquals('O', utilizadorAmador0.getGenero());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Abdominais abdominais0 = new Abdominais();
      utilizadorAmador0.addAtividade(abdominais0);
      utilizadorAmador0.getAtividadesIsoladas();
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      int int0 = utilizadorAmador0.getAltura();
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, int0);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Period period0 = Period.ofWeeks(841);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, "", "Projeto.Utilizador", 841, 0, 886, localDate0, 'i');
      int int0 = utilizadorPraticanteOcasional0.getAltura();
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("Projeto.Utilizador", utilizadorPraticanteOcasional0.getEmail());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(886, int0);
      assertEquals("", utilizadorPraticanteOcasional0.getMorada());
      assertEquals('i', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(841, utilizadorPraticanteOcasional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.equals(utilizadorProfissional0);
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = (UtilizadorProfissional)utilizadorProfissional0.clone();
      assertEquals(0, utilizadorProfissional1.getCodUtilizador());
      assertEquals(0, utilizadorProfissional1.getAltura());
      assertEquals('\u0000', utilizadorProfissional1.getGenero());
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
      assertEquals(0, utilizadorProfissional1.getFreqCardiaca());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Abdominais abdominais0 = new Abdominais();
      utilizadorAmador0.addAtividade(abdominais0);
      LocalDate localDate0 = MockLocalDate.now();
      List<Atividade> list0 = utilizadorAmador0.allAtividades(localDate0, localDate0);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.utilizadorNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Period period0 = Period.ofMonths(70);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      // Undeclared exception!
      try { 
        utilizadorProfissional0.totalCaloriasDispendidas((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setDataNascimento((LocalDate) null);
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        utilizadorAmador0.numeroAtividades((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(clock0);
      HijrahDate hijrahDate0 = MockHijrahDate.from(zonedDateTime0);
      LocalDate localDate0 = MockLocalDate.from(hijrahDate0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, (-946), 0, (-946), localDate0, '_');
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.infoDasAtividadesUtilizadorNumPeriodoQueRespeitamP((LocalDate) null, (LocalDate) null, (Predicate<Atividade>) null, (BiFunction<Atividade, Utilizador, Ciclismo>) null, (Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Abdominais abdominais0 = new Abdominais();
      utilizadorAmador0.addAtividade(abdominais0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      // Undeclared exception!
      try { 
        utilizadorAmador0.infoDasAtividadesNumPeriodoQueRespeitamP(localDate0, localDate0, (Predicate<Atividade>) null, (Function<Atividade, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("<dcvX&GZ^I!f", "3Y:y3'#!*p", "3Y:y3'#!*p", 6, 6, 6, (LocalDate) null, '*');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.getIdade();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", 881, 551, 881, (LocalDate) null, 'e');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.getBMR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", 3183, 5, 3183, (LocalDate) null, '\"');
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      // Undeclared exception!
      try { 
        utilizadorProfissional1.equals(utilizadorProfissional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("@1g}VN9(-(?nUo", "FcC5^&\"s", "Projeto.Atividade", 5, 5, 5, (LocalDate) null, '?');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorAmador0);
      // Undeclared exception!
      try { 
        utilizadorAmador0.atividadesNumPeriodoQueRespeitamP((LocalDate) null, (LocalDate) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Period period0 = Period.ofYears((-65));
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nEmail: ", "\nEmail: ", "\nEmail: ", 32, 2, 2, localDate0, '6');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorAmador0);
      // Undeclared exception!
      try { 
        utilizadorAmador0.atividadesIsoladas(localDate0, (LocalDate) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("GzK[i 1h7C{@Yv", "", "GzK[i 1h7C{@Yv", 1368, 55, 1368, (LocalDate) null, '_');
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.system(zoneId0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.allMetrosAltimetria((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.allKmsDistancia((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Iteracoes: ", "Iteracoes: ", "Iteracoes: ", 5, 1, (-1108), (LocalDate) null, '8');
      // Undeclared exception!
      try { 
        utilizadorAmador0.addPlanoTreino((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.addAtividadePlanoTreino(1150, (Atividade) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(7, 7, 7, 7, 7);
      LocalDate localDate0 = MockLocalDate.from(localDateTime0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDateTime0);
      utilizadorPraticanteOcasional0.infoDasAtividadesNumPeriodoQueRespeitamP(localDate0, localDate0, predicate0, (Function<Atividade, Flexoes>) null);
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("\nTipo de atividade: Ciclismo\n", "", "\nTipo de atividade: Ciclismo\n", 0, (-905), 0, localDate0, 'M');
      double double0 = utilizadorProfissional0.getPeso();
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals("\nTipo de atividade: Ciclismo\n", utilizadorProfissional0.getNome());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals('M', utilizadorProfissional0.getGenero());
      assertEquals("\nTipo de atividade: Ciclismo\n", utilizadorProfissional0.getEmail());
      assertEquals((-905.0), double0, 0.01);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals("", utilizadorProfissional0.getMorada());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Period period0 = Period.ofYears((-65));
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nEmail: ", "\nEmail: ", "\nEmail: ", 32, 2, 2, localDate0, '6');
      char char0 = utilizadorAmador0.getGenero();
      assertEquals(32, utilizadorAmador0.getFreqCardiaca());
      assertEquals(2.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(2, utilizadorAmador0.getAltura());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("`M~", "`M~", "KgT", 0, (-1408), 0, localDate0, '!');
      int int0 = utilizadorAmador0.getCodUtilizador();
      assertEquals((-1408.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('!', utilizadorAmador0.getGenero());
      assertEquals(1, int0);
      assertEquals("`M~", utilizadorAmador0.getMorada());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals("KgT", utilizadorAmador0.getEmail());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("`M~", utilizadorAmador0.getNome());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, 604, 604, (-2024), localDate0, '{');
      utilizadorPraticanteOcasional0.getAtividadesIsoladas();
      assertEquals((-2024), utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(604.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(604, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('{', utilizadorPraticanteOcasional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("`M~", "`M~", "KgT", 0, (-1408), 0, localDate0, '!');
      BenchPress benchPress0 = new BenchPress();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) benchPress0);
      utilizadorAmador0.atividadesIsoladas(localDate0, localDate0, predicate0);
      assertEquals("KgT", utilizadorAmador0.getEmail());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals((-1408.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals('!', utilizadorAmador0.getGenero());
      assertEquals("`M~", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("`M~", utilizadorAmador0.getNome());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      int int0 = utilizadorProfissional0.getFreqCardiaca();
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("tla5QSg1j\"~9uO`a", (String) null, (String) null, (-3039), 639, (-3039), localDate0, 'Y');
      int int0 = utilizadorPraticanteOcasional0.getAltura();
      assertEquals('Y', utilizadorPraticanteOcasional0.getGenero());
      assertEquals((-3039), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(639.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals((-3039), int0);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-161));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("O_A+[", "O_A+[", "O_A+[", (-161), 1619, 1619, localDate0, 'Q');
      int int0 = utilizadorAmador0.getIdade();
      assertEquals(1619, utilizadorAmador0.getAltura());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-161), utilizadorAmador0.getFreqCardiaca());
      assertEquals('Q', utilizadorAmador0.getGenero());
      assertEquals(1619.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, 604, 604, (-2024), localDate0, '{');
      utilizadorPraticanteOcasional0.planosTreinos(localDate0, localDate0);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals((-2024), utilizadorPraticanteOcasional0.getAltura());
      assertEquals(604, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('{', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(604.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", 881, 551, 881, (LocalDate) null, 'e');
      utilizadorProfissional0.getDataNascimento();
      assertEquals('e', utilizadorProfissional0.getGenero());
      assertEquals(881, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(881, utilizadorProfissional0.getAltura());
      assertEquals(551.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("`M~", "`M~", "KgT", 0, (-1408), 0, localDate0, '!');
      String string0 = utilizadorAmador0.getEmail();
      assertEquals((-1408.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('!', utilizadorAmador0.getGenero());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("`M~", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("KgT", string0);
      assertEquals("`M~", utilizadorAmador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.getNome();
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.getMorada();
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, 604, 604, (-2024), localDate0, '{');
      utilizadorPraticanteOcasional0.getAtividadesPlanoTreino();
      assertEquals(604.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('{', utilizadorPraticanteOcasional0.getGenero());
      assertEquals((-2024), utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(604, utilizadorPraticanteOcasional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setGenero('M');
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertEquals('M', utilizadorProfissional0.getGenero());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional0.setAltura(5582);
      Object object0 = utilizadorProfissional0.clone();
      boolean boolean0 = utilizadorProfissional1.equals(object0);
      assertEquals(5582, utilizadorProfissional0.getAltura());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Period period0 = Period.ofYears(1621);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 1621, 1621, 1621, localDate0, '*');
      UtilizadorAmador utilizadorAmador1 = (UtilizadorAmador)utilizadorAmador0.utilizadorNumPeriodo(localDate0, localDate0);
      utilizadorAmador1.setFreqCardiaca('*');
      boolean boolean0 = utilizadorAmador0.equals(utilizadorAmador1);
      assertEquals(42, utilizadorAmador1.getFreqCardiaca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
      
      utilizadorProfissional0.setNome("&vNnwtQh*0`h");
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "otAmYg2xlXT)B>u_^", (String) null, (-1322), (-1322), (-1322), localDate0, 'E');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador();
      boolean boolean0 = utilizadorAmador0.equals(utilizadorAmador1);
      assertEquals((-1322), utilizadorAmador0.getFreqCardiaca());
      assertEquals((-1322.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("otAmYg2xlXT)B>u_^", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-1322), utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador1.getFreqCardiaca());
      assertEquals(0, utilizadorAmador1.getCodUtilizador());
      assertEquals('E', utilizadorAmador0.getGenero());
      assertEquals('\u0000', utilizadorAmador1.getGenero());
      assertEquals(0, utilizadorAmador1.getAltura());
      assertFalse(boolean0);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0.0, utilizadorAmador1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0);
      boolean boolean0 = utilizadorPraticanteOcasional1.equals(utilizadorPraticanteOcasional0);
      assertEquals(0, utilizadorPraticanteOcasional1.getFreqCardiaca());
      assertTrue(utilizadorPraticanteOcasional0.equals((Object)utilizadorPraticanteOcasional1));
      assertEquals(0, utilizadorPraticanteOcasional1.getAltura());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorPraticanteOcasional1.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional1.getCodUtilizador());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0);
      assertTrue(utilizadorPraticanteOcasional1.equals((Object)utilizadorPraticanteOcasional0));
      
      utilizadorPraticanteOcasional0.setDataNascimento((LocalDate) null);
      boolean boolean0 = utilizadorPraticanteOcasional1.equals(utilizadorPraticanteOcasional0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, 604, 604, (-2024), localDate0, '{');
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorPraticanteOcasional0.addPlanoTreino(planoTreino0);
      String string0 = utilizadorPraticanteOcasional0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: null\nMorada: null\nEmail: null\nFrequencia Cardiaca: 604 bpm\nPeso: 604.0 kilos\nAltura: -2024 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: {\nAtividades: \n\nPlanos de treino: \nPlano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n\nTipo de Utilizador: Praticante Ocasional\n", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LegPress legPress0 = new LegPress();
      utilizadorPraticanteOcasional0.addAtividade(legPress0);
      String string0 = utilizadorPraticanteOcasional0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n\nPlanos de treino: \n\nTipo de Utilizador: Praticante Ocasional\n", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setGenero('F');
      double double0 = utilizadorProfissional0.getBMR();
      assertEquals('F', utilizadorProfissional0.getGenero());
      assertEquals((-161.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setGenero('M');
      double double0 = utilizadorProfissional0.getBMR();
      assertEquals('M', utilizadorProfissional0.getGenero());
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional(" `)#P{pY6", "", "", 1211, (-1322), (-1322), localDate0, 'E');
      PlanoTreino planoTreino0 = utilizadorPraticanteOcasional0.getPlanoTreinoId(1211);
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      assertEquals("", utilizadorPraticanteOcasional0.getMorada());
      assertEquals(1211, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('E', utilizadorPraticanteOcasional0.getGenero());
      assertEquals((-1322.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(" `)#P{pY6", utilizadorPraticanteOcasional0.getNome());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals("", utilizadorPraticanteOcasional0.getEmail());
      assertEquals((-1322), utilizadorPraticanteOcasional0.getAltura());
      
      LocalDate localDate1 = MockLocalDate.ofEpochDay((-1322));
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorAmador0);
      List<Atividade> list0 = utilizadorAmador0.atividadesNumPeriodoQueRespeitamP(localDate1, localDate0, predicate0);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, list0.size());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LegPress legPress0 = new LegPress();
      utilizadorPraticanteOcasional0.addAtividade(legPress0);
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorPraticanteOcasional0, 0.0);
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0.0, legPress1.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional(" `)#P{pY6", "", "", 1211, (-1322), (-1322), localDate0, 'E');
      PlanoTreino planoTreino0 = utilizadorPraticanteOcasional0.getPlanoTreinoId(1211);
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      assertEquals("", utilizadorPraticanteOcasional0.getEmail());
      assertEquals((-1322.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(" `)#P{pY6", utilizadorPraticanteOcasional0.getNome());
      assertEquals("", utilizadorPraticanteOcasional0.getMorada());
      assertEquals(1211, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals((-1322), utilizadorPraticanteOcasional0.getAltura());
      assertEquals('E', utilizadorPraticanteOcasional0.getGenero());
      
      utilizadorAmador0.getPlanoTreinoId((-1322));
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, 604, 604, (-2024), localDate0, '{');
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorPraticanteOcasional0.addPlanoTreino(planoTreino0);
      utilizadorPraticanteOcasional0.getPlanoTreinoId(0);
      assertEquals(604.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(604, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('{', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals((-2024), utilizadorPraticanteOcasional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LegPress legPress0 = new LegPress();
      utilizadorPraticanteOcasional0.addAtividade(legPress0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0);
      assertTrue(utilizadorPraticanteOcasional1.equals((Object)utilizadorPraticanteOcasional0));
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional1.getFreqCardiaca());
      assertEquals('\u0000', utilizadorPraticanteOcasional1.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional1.getAltura());
      assertEquals(0, utilizadorPraticanteOcasional1.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LocalDate localDate0 = MockLocalDate.now();
      List<Atividade> list0 = utilizadorPraticanteOcasional0.allAtividades(localDate0, localDate0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) list0);
      BiFunction<Atividade, Utilizador, PlanoTreino> biFunction0 = (BiFunction<Atividade, Utilizador, PlanoTreino>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      utilizadorPraticanteOcasional0.infoDasAtividadesUtilizadorNumPeriodoQueRespeitamP(localDate0, localDate0, predicate0, biFunction0, (Utilizador) utilizadorPraticanteOcasional0);
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Period period0 = Period.ofYears((-65));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nEmail: ", "\nEmail: ", "\nEmail: ", 32, 2, 2, localDate0, '6');
      // Undeclared exception!
      try { 
        utilizadorAmador0.planoTreinoMaisCalorias(localDate0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LocalDate localDate0 = MockLocalDate.now();
      double double0 = utilizadorPraticanteOcasional0.totalCaloriasDispendidas(localDate0, localDate0);
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.setProximoCodigo(0);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("mVuO", "IG-UIZ", "", (-627), 0, 857, localDate0, '\'');
      Trail trail0 = new Trail((LocalDateTime) null, (LocalTime) null, 75, 1195.1376, (-66.05899653647));
      // Undeclared exception!
      try { 
        utilizadorProfissional0.addAtividade(trail0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      LocalDate localDate0 = MockLocalDate.now();
      utilizadorProfissional0.allMetrosAltimetria(localDate0, localDate0);
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, 604, 604, (-2024), localDate0, '{');
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0);
      assertTrue(utilizadorPraticanteOcasional1.equals((Object)utilizadorPraticanteOcasional0));
      
      utilizadorPraticanteOcasional1.setMorada("Utilizador\nCodigo de Utilizador: 1\nNome: null\nMorada: null\nEmail: null\nFrequencia Cardiaca: 604 bpm\nPeso: 604.0 kilos\nAltura: -2024 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: {\nAtividades: \n\nPlanos de treino: \nPlano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n\nTipo de Utilizador: Praticante Ocasional\n");
      boolean boolean0 = utilizadorPraticanteOcasional1.equals(utilizadorPraticanteOcasional0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, 604, 604, (-2024), localDate0, '{');
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorPraticanteOcasional0.addPlanoTreino(planoTreino0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = (UtilizadorPraticanteOcasional)utilizadorPraticanteOcasional0.clone();
      assertEquals(604, utilizadorPraticanteOcasional1.getFreqCardiaca());
      assertEquals('{', utilizadorPraticanteOcasional1.getGenero());
      assertEquals((-2024), utilizadorPraticanteOcasional1.getAltura());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals((-2024), utilizadorPraticanteOcasional0.getAltura());
      assertEquals(604, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(1, utilizadorPraticanteOcasional1.getCodUtilizador());
      assertEquals(604.0, utilizadorPraticanteOcasional1.getPeso(), 0.01);
      assertEquals(604.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, (-671), 896, (-671), localDate0, '+');
      utilizadorPraticanteOcasional0.setEmail("Projeto.Utilizador");
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals((-671), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals((-671), utilizadorPraticanteOcasional0.getAltura());
      assertEquals('+', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(896.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.setPeso(0);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, (-671), 896, (-671), localDate0, '+');
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0, localDate0, localDate0);
      assertTrue(utilizadorPraticanteOcasional1.equals((Object)utilizadorPraticanteOcasional0));
      
      utilizadorPraticanteOcasional1.setEmail("Projeto.Utilizador");
      boolean boolean0 = utilizadorPraticanteOcasional0.equals(utilizadorPraticanteOcasional1);
      assertFalse(boolean0);
  }
}
