/*
 * This file was automatically generated by EvoSuite
 * Wed May 07 08:55:08 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.Atividade;
import Projeto.BenchPress;
import Projeto.BicepCurls;
import Projeto.Btt;
import Projeto.Ciclismo;
import Projeto.Corrida;
import Projeto.Flexoes;
import Projeto.LegPress;
import Projeto.PlanoTreino;
import Projeto.Trail;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.format.DecimalStyle;
import java.time.zone.ZoneRulesException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlanoTreino_ESTest extends PlanoTreino_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis((-1862L));
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      List<PlanoTreino.AtividadeIteracoes> list0 = planoTreino0.getAtividades();
      assertNotNull(list0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      BicepCurls bicepCurls0 = new BicepCurls();
      assertNotNull(bicepCurls0);
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      assertNotNull(bicepCurls1);
      assertTrue(bicepCurls1.equals((Object)bicepCurls0));
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0, bicepCurls1.getRepeticoes());
      assertEquals(0, bicepCurls1.getFreqCardiaca());
      assertEquals(1, bicepCurls1.getCodAtividade());
      assertEquals(0.0, bicepCurls1.getPeso(), 0.01);
      
      planoTreino0.addAtividade(bicepCurls1, 3);
      assertNotSame(bicepCurls0, bicepCurls1);
      assertNotSame(bicepCurls1, bicepCurls0);
      assertTrue(bicepCurls0.equals((Object)bicepCurls1));
      assertTrue(bicepCurls1.equals((Object)bicepCurls0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0, bicepCurls1.getRepeticoes());
      assertEquals(0, bicepCurls1.getFreqCardiaca());
      assertEquals(1, bicepCurls1.getCodAtividade());
      assertEquals(0.0, bicepCurls1.getPeso(), 0.01);
      
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.clone();
      assertNotNull(planoTreino1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino0.setDataRealizacao((LocalDate) null);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      
      planoTreino0.setProximoCodigo((-635));
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      
      LocalDate localDate0 = planoTreino0.getDataRealizacao();
      assertNull(localDate0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      
      String string0 = planoTreino0.toString();
      assertEquals("Plano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: null\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 31/12/1969 23:59:58\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bicep curls\nIteracoes: 3\n", string0);
      assertNotNull(string0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      Ciclismo ciclismo0 = new Ciclismo();
      assertNotNull(ciclismo0);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      
      int int0 = 0;
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-1631), ciclismo0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals((-1631), planoTreino_AtividadeIteracoes0.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      assertNotNull(planoTreino_AtividadeIteracoes1);
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals((-1631), planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals((-1631), planoTreino_AtividadeIteracoes1.getIteracoes());
      
      boolean boolean0 = planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      assertTrue(boolean0);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals((-1631), planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals((-1631), planoTreino_AtividadeIteracoes1.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes1);
      assertNotNull(planoTreino_AtividadeIteracoes2);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals((-1631), planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals((-1631), planoTreino_AtividadeIteracoes1.getIteracoes());
      assertEquals((-1631), planoTreino_AtividadeIteracoes2.getIteracoes());
      
      planoTreino0.addAtividade(ciclismo0, (-1631));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino_AtividadeIteracoes1.setIteracoes((-1631));
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals((-1631), planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals((-1631), planoTreino_AtividadeIteracoes1.getIteracoes());
      
      planoTreino_AtividadeIteracoes1.setAtividade(ciclismo0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals((-1631), planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals((-1631), planoTreino_AtividadeIteracoes1.getIteracoes());
      
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      assertNotNull(predicate0);
      
      List<Atividade> list0 = planoTreino1.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      assertNotNull(list0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      int int1 = planoTreino0.compareTo(planoTreino1);
      assertEquals(0, int1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(int1 == int0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      String string0 = planoTreino1.toString();
      assertEquals("Plano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\nIteracoes: -1631\n", string0);
      assertNotNull(string0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino_AtividadeIteracoes1.setIteracoes(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals((-1631), planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      LocalDate localDate1 = planoTreino1.getDataRealizacao();
      assertNotNull(localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(localDate1.equals((Object)localDate0));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      int int2 = planoTreino1.getCodPlano();
      assertEquals(0, int2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino0.setProximoCodigo(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino2 = (PlanoTreino)planoTreino1.planoTreinoNumPeriodo(localDate0, localDate1);
      assertNotNull(planoTreino2);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(planoTreino2, planoTreino0);
      assertNotSame(planoTreino2, planoTreino1);
      assertNotSame(planoTreino1, planoTreino2);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(localDate1.equals((Object)localDate0));
      assertTrue(localDate0.equals((Object)localDate1));
      assertFalse(planoTreino2.equals((Object)planoTreino0));
      assertFalse(planoTreino2.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino2.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      int int3 = planoTreino0.getCodPlano();
      assertEquals(0, int3);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, planoTreino0.getCodPlano());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        ZoneId.of("n7e6s", (Map<String, String>) hashMap0);
        fail("Expecting exception: ZoneRulesException");
      
      } catch(ZoneRulesException e) {
         //
         // Unknown time-zone ID: n7e6s
         //
         verifyException("java.time.zone.ZoneRulesProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      Ciclismo ciclismo0 = new Ciclismo();
      assertNotNull(ciclismo0);
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1855, ciclismo0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      assertNotNull(planoTreino_AtividadeIteracoes1);
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      boolean boolean0 = planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      assertTrue(boolean0);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes1);
      assertNotNull(planoTreino_AtividadeIteracoes2);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes2.getIteracoes());
      
      planoTreino0.addAtividade(ciclismo0, 1855);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino_AtividadeIteracoes1.setIteracoes(1855);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      planoTreino_AtividadeIteracoes1.setAtividade(ciclismo0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      assertNotNull(predicate0);
      
      List<Atividade> list0 = planoTreino1.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      assertNotNull(list0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      int int0 = planoTreino0.compareTo(planoTreino1);
      assertEquals(0, int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      String string0 = planoTreino_AtividadeIteracoes1.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\nIteracoes: 1855\n", string0);
      assertNotNull(string0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      planoTreino_AtividadeIteracoes1.setIteracoes(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      LocalDate localDate1 = planoTreino1.getDataRealizacao();
      assertNotNull(localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertTrue(localDate1.equals((Object)localDate0));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      int int1 = planoTreino1.getCodPlano();
      assertEquals(0, int1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(int1 == int0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino0.setProximoCodigo(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino2 = (PlanoTreino)planoTreino0.clone();
      assertNotNull(planoTreino2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino2, planoTreino0);
      assertNotSame(planoTreino2, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino2.equals((Object)planoTreino0));
      assertFalse(planoTreino2.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino2.getCodPlano());
      
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional(" 0W@JRZvtGBg]e%", "n7e6s", "Onp].e$S+^", 6, 1939, (-1), localDate1, '_');
      assertNotNull(utilizadorProfissional0);
      assertTrue(localDate1.equals((Object)localDate0));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(planoTreino1.equals((Object)planoTreino2));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals("Onp].e$S+^", utilizadorProfissional0.getEmail());
      assertEquals((-1), utilizadorProfissional0.getAltura());
      assertEquals('_', utilizadorProfissional0.getGenero());
      assertEquals(1939.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(1.5, utilizadorProfissional0.getFatorMultiplicativo(), 0.01);
      assertEquals(" 0W@JRZvtGBg]e%", utilizadorProfissional0.getNome());
      assertEquals("n7e6s", utilizadorProfissional0.getMorada());
      assertEquals(6, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, planoTreino1.getCodPlano());
      
      List<PlanoTreino> list1 = planoTreino1.geraPlanoTreino(utilizadorProfissional0, list0, (-343), 0, 70, localDate0);
      assertNotNull(list1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(planoTreino1, planoTreino2);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(list1.contains(planoTreino2));
      assertTrue(localDate1.equals((Object)localDate0));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertTrue(localDate0.equals((Object)localDate1));
      assertFalse(planoTreino1.equals((Object)planoTreino2));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals("Onp].e$S+^", utilizadorProfissional0.getEmail());
      assertEquals((-1), utilizadorProfissional0.getAltura());
      assertEquals('_', utilizadorProfissional0.getGenero());
      assertEquals(1939.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(1.5, utilizadorProfissional0.getFatorMultiplicativo(), 0.01);
      assertEquals(" 0W@JRZvtGBg]e%", utilizadorProfissional0.getNome());
      assertEquals("n7e6s", utilizadorProfissional0.getMorada());
      assertEquals(6, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<PlanoTreino.AtividadeIteracoes> list2 = planoTreino0.getAtividades();
      assertNotNull(list2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertFalse(list2.contains(planoTreino_AtividadeIteracoes1));
      assertTrue(list2.contains(planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      Ciclismo ciclismo0 = new Ciclismo();
      assertNotNull(ciclismo0);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1855, ciclismo0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      assertNotNull(planoTreino_AtividadeIteracoes1);
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      boolean boolean0 = planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      assertTrue(boolean0);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes1);
      assertNotNull(planoTreino_AtividadeIteracoes2);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes1));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes2.getIteracoes());
      
      planoTreino0.addAtividade(ciclismo0, 1855);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino_AtividadeIteracoes1.setIteracoes(1855);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      planoTreino_AtividadeIteracoes1.setAtividade(ciclismo0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      assertNotNull(predicate0);
      
      List<Atividade> list0 = planoTreino1.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      assertNotNull(list0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int int0 = planoTreino0.compareTo(planoTreino1);
      assertEquals(0, int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      String string0 = planoTreino_AtividadeIteracoes1.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\nIteracoes: 1855\n", string0);
      assertNotNull(string0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      planoTreino_AtividadeIteracoes1.setIteracoes(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      LocalDate localDate1 = planoTreino1.getDataRealizacao();
      assertNotNull(localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertTrue(localDate1.equals((Object)localDate0));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      int int1 = planoTreino1.getCodPlano();
      assertEquals(0, int1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(int1 == int0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino0.setProximoCodigo(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      
      boolean boolean1 = planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes1);
      assertFalse(boolean1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(boolean1 == boolean0);
      assertFalse(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      boolean boolean2 = planoTreino_AtividadeIteracoes1.equals(ciclismo0);
      assertFalse(boolean2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, planoTreino_AtividadeIteracoes1.getIteracoes());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      Ciclismo ciclismo0 = new Ciclismo();
      assertNotNull(ciclismo0);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1855, ciclismo0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      assertNotNull(planoTreino_AtividadeIteracoes1);
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      boolean boolean0 = planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      assertTrue(boolean0);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes1);
      assertNotNull(planoTreino_AtividadeIteracoes2);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes1));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes2.getIteracoes());
      
      planoTreino0.addAtividade(ciclismo0, 1855);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino_AtividadeIteracoes1.setIteracoes(1855);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      planoTreino_AtividadeIteracoes1.setAtividade(ciclismo0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      assertNotNull(predicate0);
      
      List<Atividade> list0 = planoTreino1.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      assertNotNull(list0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      int int0 = planoTreino0.compareTo(planoTreino1);
      assertEquals(0, int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      String string0 = planoTreino_AtividadeIteracoes1.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\nIteracoes: 1855\n", string0);
      assertNotNull(string0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      String string1 = planoTreino0.toString();
      assertEquals("Plano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\nIteracoes: 1855\n", string1);
      assertNotNull(string1);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, planoTreino0.getCodPlano());
      
      planoTreino_AtividadeIteracoes1.setIteracoes(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      LocalDate localDate1 = planoTreino1.getDataRealizacao();
      assertNotNull(localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(localDate1.equals((Object)localDate0));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      int int1 = planoTreino1.getCodPlano();
      assertEquals(0, int1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(int1 == int0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino0.setProximoCodigo(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      
      String string2 = planoTreino1.toString();
      assertEquals("Plano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\nIteracoes: 1855\n", string2);
      assertNotNull(string2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      List<Atividade> list1 = planoTreino1.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      assertNotNull(list1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(localDate0, localDate1);
      assertNotSame(list1, list0);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(localDate0.equals((Object)localDate1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, planoTreino1.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      Ciclismo ciclismo0 = new Ciclismo();
      assertNotNull(ciclismo0);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "n7e6s", 1855, 317, 0, localDate0, '_');
      assertNotNull(utilizadorAmador0);
      assertEquals(1855, utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(317.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('_', utilizadorAmador0.getGenero());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("n7e6s", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      
      PlanoTreino planoTreino1 = utilizadorAmador0.getPlanoTreinoId(0);
      assertNotNull(planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(1855, utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(317.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('_', utilizadorAmador0.getGenero());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("n7e6s", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, planoTreino1.getCodPlano());
      
      int int0 = planoTreino0.compareTo(planoTreino1);
      assertEquals(0, int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1855, utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(317.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('_', utilizadorAmador0.getGenero());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("n7e6s", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, planoTreino1.getCodPlano());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1855, ciclismo0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      assertNotNull(planoTreino_AtividadeIteracoes1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      boolean boolean0 = planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      assertTrue(boolean0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes1);
      assertNotNull(planoTreino_AtividadeIteracoes2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes1));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes2.getIteracoes());
      
      planoTreino0.addAtividade(ciclismo0, 1855);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      
      PlanoTreino planoTreino2 = new PlanoTreino();
      assertNotNull(planoTreino2);
      assertFalse(planoTreino2.equals((Object)planoTreino1));
      assertFalse(planoTreino2.equals((Object)planoTreino0));
      assertEquals(0, planoTreino2.getCodPlano());
      
      planoTreino_AtividadeIteracoes1.setIteracoes(1855);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      int int1 = planoTreino0.compareTo(planoTreino2);
      assertEquals(0, int1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino2, planoTreino1);
      assertNotSame(planoTreino2, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(planoTreino2.equals((Object)planoTreino1));
      assertFalse(planoTreino2.equals((Object)planoTreino0));
      assertTrue(int1 == int0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino2.getCodPlano());
      
      String string0 = planoTreino_AtividadeIteracoes0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\nIteracoes: 1855\n", string0);
      assertNotNull(string0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      LocalDate localDate1 = MockLocalDate.now();
      assertNotNull(localDate1);
      assertNotSame(localDate1, localDate0);
      assertTrue(localDate1.equals((Object)localDate0));
      
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino_AtividadeIteracoes0);
      assertNotNull(predicate0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      Predicate<Atividade> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      Predicate<Atividade> predicate2 = predicate1.or(predicate0);
      assertNotNull(predicate2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      List<Atividade> list0 = planoTreino1.atividadesQueRespeitamP(localDate1, localDate0, predicate2);
      assertNotNull(list0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(planoTreino1, planoTreino2);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(localDate1, localDate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertTrue(localDate0.equals((Object)localDate1));
      assertFalse(planoTreino1.equals((Object)planoTreino2));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(localDate1.equals((Object)localDate0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1855, utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(317.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('_', utilizadorAmador0.getGenero());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("n7e6s", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      Ciclismo ciclismo0 = new Ciclismo();
      assertNotNull(ciclismo0);
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1855, ciclismo0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      assertNotNull(planoTreino_AtividadeIteracoes1);
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      boolean boolean0 = planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes0);
      assertTrue(boolean0);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes1);
      assertNotNull(planoTreino_AtividadeIteracoes2);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes2.getIteracoes());
      
      planoTreino0.addAtividade(ciclismo0, 1855);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      
      PlanoTreino planoTreino1 = new PlanoTreino();
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino_AtividadeIteracoes1.setIteracoes(1855);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      planoTreino_AtividadeIteracoes1.setAtividade(ciclismo0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      int int0 = planoTreino0.compareTo(planoTreino1);
      assertEquals(0, int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      String string0 = planoTreino_AtividadeIteracoes1.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\nIteracoes: 1855\n", string0);
      assertNotNull(string0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      planoTreino_AtividadeIteracoes1.setIteracoes(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      LocalDate localDate0 = planoTreino1.getDataRealizacao();
      assertNotNull(localDate0);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino1.getCodPlano());
      
      int int1 = planoTreino1.getCodPlano();
      assertEquals(0, int1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(int1 == int0);
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino0.setProximoCodigo(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      
      String string1 = planoTreino1.toString();
      assertEquals("Plano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", string1);
      assertNotNull(string1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino1.getCodPlano());
      
      System.setCurrentTimeMillis((-2927));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      Ciclismo ciclismo0 = new Ciclismo();
      assertNotNull(ciclismo0);
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1855, ciclismo0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      assertNotNull(planoTreino_AtividadeIteracoes1);
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      boolean boolean0 = planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      assertTrue(boolean0);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes1);
      assertNotNull(planoTreino_AtividadeIteracoes2);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes2.getIteracoes());
      
      planoTreino0.addAtividade(ciclismo0, 1855);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      
      PlanoTreino planoTreino1 = new PlanoTreino();
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino_AtividadeIteracoes1.setIteracoes(1855);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      planoTreino_AtividadeIteracoes1.setAtividade(ciclismo0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      assertNotNull(predicate0);
      
      List<Atividade> list0 = planoTreino1.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      assertNotNull(list0);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      int int0 = planoTreino0.compareTo(planoTreino1);
      assertEquals(0, int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      String string0 = planoTreino_AtividadeIteracoes1.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\nIteracoes: 1855\n", string0);
      assertNotNull(string0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      planoTreino_AtividadeIteracoes1.setIteracoes(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      LocalDate localDate1 = planoTreino1.getDataRealizacao();
      assertNotNull(localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(planoTreino1, planoTreino0);
      assertTrue(localDate1.equals((Object)localDate0));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino1.getCodPlano());
      
      int int1 = planoTreino1.getCodPlano();
      assertEquals(0, int1);
      assertNotSame(planoTreino1, planoTreino0);
      assertTrue(int1 == int0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino0.setProximoCodigo(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      
      boolean boolean1 = planoTreino_AtividadeIteracoes1.equals((Object) null);
      assertFalse(boolean1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(boolean1 == boolean0);
      assertFalse(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      List<PlanoTreino.AtividadeIteracoes> list1 = planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      assertNotNull(list1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(localDate0, localDate1);
      assertFalse(list1.contains(planoTreino_AtividadeIteracoes2));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(localDate0.equals((Object)localDate1));
      assertEquals(0, planoTreino0.getCodPlano());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.clone();
      assertNotNull(planoTreino1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = null;
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      assertNotNull(utilizadorAmador0);
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      
      int int0 = planoTreino0.getCodPlano();
      assertEquals(0, int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      List<Atividade> list0 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, (Predicate<Atividade>) null);
      assertNotNull(list0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, (-2208), 1693, (-2208), localDate0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3233L));
      assertNotNull(localDate0);
      
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      assertNotNull(planoTreino0);
      assertEquals(1, planoTreino0.getCodPlano());
      
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      assertNotNull(utilizadorProfissional0);
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals("", utilizadorProfissional0.getNome());
      assertEquals("", utilizadorProfissional0.getEmail());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1.5, utilizadorProfissional0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorProfissional0.getMorada());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      
      double double0 = utilizadorProfissional0.allKmsDistancia(localDate0, localDate0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals("", utilizadorProfissional0.getNome());
      assertEquals("", utilizadorProfissional0.getEmail());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1.5, utilizadorProfissional0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorProfissional0.getMorada());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      
      double double1 = planoTreino0.caloriasDispendidas(utilizadorProfissional0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals("", utilizadorProfissional0.getNome());
      assertEquals("", utilizadorProfissional0.getEmail());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1.5, utilizadorProfissional0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorProfissional0.getMorada());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      Duration duration0 = Duration.ofHours((-3233L));
      assertNotNull(duration0);
      
      LocalDate localDate1 = MockLocalDate.now(clock0);
      assertNotNull(localDate1);
      assertNotSame(localDate1, localDate0);
      assertFalse(localDate1.equals((Object)localDate0));
      
      PlanoTreino planoTreino1 = new PlanoTreino(localDate1);
      assertNotNull(planoTreino1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(2, planoTreino1.getCodPlano());
      
      int int0 = planoTreino0.compareTo(planoTreino1);
      assertEquals((-53), int0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(2, planoTreino1.getCodPlano());
      
      int int1 = planoTreino0.compareTo(planoTreino1);
      assertEquals((-53), int1);
      assertNotSame(localDate0, localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(int1 == int0);
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(2, planoTreino1.getCodPlano());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      assertNotNull(localDateTime0);
      
      int int2 = 1512;
      // Undeclared exception!
      try { 
        MockLocalTime.of((-53), (-53), (-53), 1512);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for HourOfDay (valid values 0 - 23): -53
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      String string0 = "\nNome: ";
      String string1 = "\nTipo de atividade: Abdominais\n";
      int int0 = (-110);
      Period period0 = Period.ofMonths(815);
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      char char0 = 'b';
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("\nNome: ", "\nTipo de atividade: Abdominais\n", "", (-110), 815, 7, localDate0, 'b');
      assertNotNull(utilizadorProfissional0);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals('b', utilizadorProfissional0.getGenero());
      assertEquals("\nNome: ", utilizadorProfissional0.getNome());
      assertEquals("", utilizadorProfissional0.getEmail());
      assertEquals("\nTipo de atividade: Abdominais\n", utilizadorProfissional0.getMorada());
      assertEquals((-110), utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1.5, utilizadorProfissional0.getFatorMultiplicativo(), 0.01);
      assertEquals(7, utilizadorProfissional0.getAltura());
      assertEquals(815.0, utilizadorProfissional0.getPeso(), 0.01);
      
      List<Atividade> list0 = null;
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorProfissional0, (List<Atividade>) null, (-2104), 815, (-110), localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", (String) null, 0, 202, 1622, localDate0, 'y');
      assertNotNull(utilizadorProfissional0);
      assertEquals("", utilizadorProfissional0.getMorada());
      assertEquals(1.5, utilizadorProfissional0.getFatorMultiplicativo(), 0.01);
      assertEquals(202.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(1622, utilizadorProfissional0.getAltura());
      assertEquals("", utilizadorProfissional0.getNome());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertNull(utilizadorProfissional0.getEmail());
      assertEquals('y', utilizadorProfissional0.getGenero());
      
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0, localDate0, localDate0);
      assertNotNull(utilizadorProfissional1);
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
      assertEquals("", utilizadorProfissional0.getMorada());
      assertEquals(1.5, utilizadorProfissional0.getFatorMultiplicativo(), 0.01);
      assertEquals(202.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(1622, utilizadorProfissional0.getAltura());
      assertEquals("", utilizadorProfissional0.getNome());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertNull(utilizadorProfissional0.getEmail());
      assertEquals('y', utilizadorProfissional0.getGenero());
      assertEquals(1.5, utilizadorProfissional1.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorProfissional1.getMorada());
      assertEquals(1, utilizadorProfissional1.getCodUtilizador());
      assertEquals(202.0, utilizadorProfissional1.getPeso(), 0.01);
      assertEquals('y', utilizadorProfissional1.getGenero());
      assertNull(utilizadorProfissional1.getEmail());
      assertEquals(1622, utilizadorProfissional1.getAltura());
      assertEquals(0, utilizadorProfissional1.getFreqCardiaca());
      assertEquals("", utilizadorProfissional1.getNome());
      
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador((String) null, (String) null, "=", 558, 916, 7, localDate0, 'x');
      assertNotNull(utilizadorAmador0);
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("=", utilizadorAmador0.getEmail());
      assertEquals(558, utilizadorAmador0.getFreqCardiaca());
      assertNull(utilizadorAmador0.getNome());
      assertEquals(7, utilizadorAmador0.getAltura());
      assertEquals(2, utilizadorAmador0.getCodUtilizador());
      assertEquals(916.0, utilizadorAmador0.getPeso(), 0.01);
      assertNull(utilizadorAmador0.getMorada());
      assertEquals('x', utilizadorAmador0.getGenero());
      
      Period period0 = Period.ofYears(4);
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate1);
      assertNotSame(localDate1, localDate0);
      assertTrue(localDate1.equals((Object)localDate0));
      
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      List<Atividade> list0 = utilizadorAmador0.atividadesIsoladas(localDate1, localDate0, predicate0);
      assertNotNull(list0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertTrue(localDate0.equals((Object)localDate1));
      assertTrue(localDate1.equals((Object)localDate0));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("=", utilizadorAmador0.getEmail());
      assertEquals(558, utilizadorAmador0.getFreqCardiaca());
      assertNull(utilizadorAmador0.getNome());
      assertEquals(7, utilizadorAmador0.getAltura());
      assertEquals(2, utilizadorAmador0.getCodUtilizador());
      assertEquals(916.0, utilizadorAmador0.getPeso(), 0.01);
      assertNull(utilizadorAmador0.getMorada());
      assertEquals('x', utilizadorAmador0.getGenero());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      LocalDate localDate2 = MockLocalDate.from(localDate1);
      assertNotNull(localDate2);
      assertSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate0);
      assertSame(localDate2, localDate1);
      assertTrue(localDate1.equals((Object)localDate0));
      assertTrue(localDate2.equals((Object)localDate0));
      
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorProfissional1, list0, 7, 4, 4, localDate2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = null;
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      assertNotNull(planoTreino0);
      assertEquals(1, planoTreino0.getCodPlano());
      
      String string0 = "Plano de Treino\nCodigo de Plano de Treino: ";
      int int0 = 70;
      int int1 = 1858;
      // Undeclared exception!
      try { 
        planoTreino0.atividadesQueRespeitamP((LocalDate) null, (LocalDate) null, (Predicate<Atividade>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, (Atividade) null);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      boolean boolean0 = planoTreino_AtividadeIteracoes0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = 'x';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {';', 'x'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(";x", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      
      // Undeclared exception!
      try { 
        MockInstant.parse(charBuffer0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text ';x' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      assertNotNull(utilizadorAmador0);
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(238);
      assertNotNull(planoTreino0);
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, planoTreino0.getCodPlano());
      
      Abdominais abdominais0 = new Abdominais();
      assertNotNull(abdominais0);
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
      assertEquals(0, abdominais0.getRepeticoes());
      
      Abdominais abdominais1 = (Abdominais)abdominais0.geraAtividade(utilizadorAmador0, 238);
      assertNotNull(abdominais1);
      assertNotSame(abdominais0, abdominais1);
      assertNotSame(abdominais1, abdominais0);
      assertFalse(abdominais1.equals((Object)abdominais0));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
      assertEquals(0, abdominais0.getRepeticoes());
      assertEquals(2, abdominais1.getCodAtividade());
      assertEquals(Integer.MAX_VALUE, abdominais1.getRepeticoes());
      assertEquals(0, abdominais1.getFreqCardiaca());
      
      Abdominais abdominais2 = (Abdominais)abdominais0.geraAtividade(utilizadorAmador0, 238);
      assertNotNull(abdominais2);
      assertNotSame(abdominais0, abdominais1);
      assertNotSame(abdominais0, abdominais2);
      assertNotSame(abdominais2, abdominais0);
      assertNotSame(abdominais2, abdominais1);
      assertFalse(abdominais0.equals((Object)abdominais1));
      assertTrue(abdominais2.equals((Object)abdominais1));
      assertFalse(abdominais2.equals((Object)abdominais0));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
      assertEquals(0, abdominais0.getRepeticoes());
      assertEquals(3, abdominais2.getCodAtividade());
      assertEquals(Integer.MAX_VALUE, abdominais2.getRepeticoes());
      assertEquals(0, abdominais2.getFreqCardiaca());
      
      planoTreino0.addAtividade(abdominais1, 1716);
      assertNotSame(abdominais0, abdominais1);
      assertNotSame(abdominais0, abdominais2);
      assertNotSame(abdominais1, abdominais0);
      assertNotSame(abdominais1, abdominais2);
      assertFalse(abdominais0.equals((Object)abdominais1));
      assertFalse(abdominais0.equals((Object)abdominais2));
      assertTrue(abdominais1.equals((Object)abdominais2));
      assertFalse(abdominais1.equals((Object)abdominais0));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
      assertEquals(0, abdominais0.getRepeticoes());
      assertEquals(2, abdominais1.getCodAtividade());
      assertEquals(Integer.MAX_VALUE, abdominais1.getRepeticoes());
      assertEquals(0, abdominais1.getFreqCardiaca());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1716, abdominais1);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertFalse(abdominais0.equals((Object)abdominais1));
      assertFalse(abdominais0.equals((Object)abdominais2));
      assertTrue(abdominais1.equals((Object)abdominais2));
      assertFalse(abdominais1.equals((Object)abdominais0));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
      assertEquals(0, abdominais0.getRepeticoes());
      assertEquals(2, abdominais1.getCodAtividade());
      assertEquals(Integer.MAX_VALUE, abdominais1.getRepeticoes());
      assertEquals(0, abdominais1.getFreqCardiaca());
      assertEquals(1716, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      assertNotNull(planoTreino_AtividadeIteracoes1);
      assertFalse(abdominais0.equals((Object)abdominais1));
      assertFalse(abdominais0.equals((Object)abdominais2));
      assertTrue(abdominais1.equals((Object)abdominais2));
      assertFalse(abdominais1.equals((Object)abdominais0));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
      assertEquals(0, abdominais0.getRepeticoes());
      assertEquals(2, abdominais1.getCodAtividade());
      assertEquals(Integer.MAX_VALUE, abdominais1.getRepeticoes());
      assertEquals(0, abdominais1.getFreqCardiaca());
      assertEquals(1716, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1716, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      Abdominais abdominais3 = (Abdominais)planoTreino_AtividadeIteracoes1.getAtividade();
      assertNotNull(abdominais3);
      assertNotSame(abdominais0, abdominais1);
      assertNotSame(abdominais0, abdominais3);
      assertNotSame(abdominais0, abdominais2);
      assertNotSame(abdominais1, abdominais0);
      assertNotSame(abdominais1, abdominais2);
      assertNotSame(abdominais1, abdominais3);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertNotSame(abdominais3, abdominais1);
      assertNotSame(abdominais3, abdominais0);
      assertNotSame(abdominais3, abdominais2);
      assertFalse(abdominais0.equals((Object)abdominais1));
      assertFalse(abdominais0.equals((Object)abdominais2));
      assertTrue(abdominais1.equals((Object)abdominais2));
      assertFalse(abdominais1.equals((Object)abdominais0));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(abdominais3.equals((Object)abdominais2));
      assertFalse(abdominais3.equals((Object)abdominais0));
      assertTrue(abdominais3.equals((Object)abdominais1));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
      assertEquals(0, abdominais0.getRepeticoes());
      assertEquals(2, abdominais1.getCodAtividade());
      assertEquals(Integer.MAX_VALUE, abdominais1.getRepeticoes());
      assertEquals(0, abdominais1.getFreqCardiaca());
      assertEquals(1716, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1716, planoTreino_AtividadeIteracoes1.getIteracoes());
      assertEquals(Integer.MAX_VALUE, abdominais3.getRepeticoes());
      assertEquals(0, abdominais3.getFreqCardiaca());
      assertEquals(2, abdominais3.getCodAtividade());
      
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.clone();
      assertNotNull(planoTreino1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      int int0 = planoTreino0.getCodPlano();
      assertEquals(0, int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, planoTreino0.getCodPlano());
      
      String string0 = planoTreino_AtividadeIteracoes0.toString();
      assertEquals("Atividade\nId: 2\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 03:14:07\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 2147483647\nTipo de atividade: Abdominais\nIteracoes: 1716\n", string0);
      assertNotNull(string0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(abdominais0, abdominais1);
      assertNotSame(abdominais0, abdominais3);
      assertNotSame(abdominais0, abdominais2);
      assertNotSame(abdominais1, abdominais0);
      assertNotSame(abdominais1, abdominais2);
      assertNotSame(abdominais1, abdominais3);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(abdominais0.equals((Object)abdominais1));
      assertFalse(abdominais0.equals((Object)abdominais3));
      assertFalse(abdominais0.equals((Object)abdominais2));
      assertTrue(abdominais1.equals((Object)abdominais3));
      assertTrue(abdominais1.equals((Object)abdominais2));
      assertFalse(abdominais1.equals((Object)abdominais0));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
      assertEquals(0, abdominais0.getRepeticoes());
      assertEquals(2, abdominais1.getCodAtividade());
      assertEquals(Integer.MAX_VALUE, abdominais1.getRepeticoes());
      assertEquals(0, abdominais1.getFreqCardiaca());
      assertEquals(1716, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      planoTreino0.addAtividade(abdominais1, 77);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(abdominais0, abdominais1);
      assertNotSame(abdominais0, abdominais3);
      assertNotSame(abdominais0, abdominais2);
      assertNotSame(abdominais1, abdominais0);
      assertNotSame(abdominais1, abdominais2);
      assertNotSame(abdominais1, abdominais3);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(abdominais0.equals((Object)abdominais1));
      assertFalse(abdominais0.equals((Object)abdominais3));
      assertFalse(abdominais0.equals((Object)abdominais2));
      assertTrue(abdominais1.equals((Object)abdominais3));
      assertTrue(abdominais1.equals((Object)abdominais2));
      assertFalse(abdominais1.equals((Object)abdominais0));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
      assertEquals(0, abdominais0.getRepeticoes());
      assertEquals(2, abdominais1.getCodAtividade());
      assertEquals(Integer.MAX_VALUE, abdominais1.getRepeticoes());
      assertEquals(0, abdominais1.getFreqCardiaca());
      
      // Undeclared exception!
      try { 
        planoTreino0.caloriasDispendidas(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = null;
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      assertNotNull(planoTreino0);
      assertEquals(1, planoTreino0.getCodPlano());
      
      // Undeclared exception!
      try { 
        planoTreino0.planoTreinoNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      assertNotNull(utilizadorAmador0);
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      assertNotNull(planoTreino0);
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      BicepCurls bicepCurls0 = new BicepCurls();
      assertNotNull(bicepCurls0);
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      
      bicepCurls0.setPeso(0);
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino1.new AtividadeIteracoes(0, bicepCurls0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(0, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      int int0 = planoTreino_AtividadeIteracoes0.getIteracoes();
      assertEquals(0, int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(0, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      BicepCurls bicepCurls1 = (BicepCurls)planoTreino_AtividadeIteracoes0.getAtividade();
      assertNotNull(bicepCurls1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(bicepCurls0, bicepCurls1);
      assertNotSame(bicepCurls1, bicepCurls0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(bicepCurls1.equals((Object)bicepCurls0));
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(0, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, bicepCurls1.getRepeticoes());
      assertEquals(1, bicepCurls1.getCodAtividade());
      assertEquals(0.0, bicepCurls1.getPeso(), 0.01);
      assertEquals(0, bicepCurls1.getFreqCardiaca());
      
      BicepCurls bicepCurls2 = (BicepCurls)planoTreino_AtividadeIteracoes0.getAtividade();
      assertNotNull(bicepCurls2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(bicepCurls0, bicepCurls1);
      assertNotSame(bicepCurls0, bicepCurls2);
      assertNotSame(bicepCurls2, bicepCurls0);
      assertNotSame(bicepCurls2, bicepCurls1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(bicepCurls0.equals((Object)bicepCurls1));
      assertTrue(bicepCurls2.equals((Object)bicepCurls1));
      assertTrue(bicepCurls2.equals((Object)bicepCurls0));
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(0, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, bicepCurls2.getRepeticoes());
      assertEquals(0, bicepCurls2.getFreqCardiaca());
      assertEquals(1, bicepCurls2.getCodAtividade());
      assertEquals(0.0, bicepCurls2.getPeso(), 0.01);
      
      planoTreino1.setProximoCodigo(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino_AtividadeIteracoes0.setAtividade(bicepCurls0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(bicepCurls0, bicepCurls1);
      assertNotSame(bicepCurls0, bicepCurls2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(bicepCurls0.equals((Object)bicepCurls1));
      assertTrue(bicepCurls0.equals((Object)bicepCurls2));
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(0, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      int int1 = planoTreino0.compareTo(planoTreino1);
      assertEquals(0, int1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(int1 == int0);
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      bicepCurls0.setRepeticoes(1250);
      assertNotSame(bicepCurls0, bicepCurls1);
      assertNotSame(bicepCurls0, bicepCurls2);
      assertFalse(bicepCurls0.equals((Object)bicepCurls1));
      assertFalse(bicepCurls0.equals((Object)bicepCurls2));
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(1250, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      
      List<PlanoTreino.AtividadeIteracoes> list0 = planoTreino0.getAtividades();
      assertNotNull(list0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(list0.contains(planoTreino_AtividadeIteracoes0));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      planoTreino0.addAtividade(bicepCurls0, (-3271));
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(bicepCurls0, bicepCurls1);
      assertNotSame(bicepCurls0, bicepCurls2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(bicepCurls0.equals((Object)bicepCurls1));
      assertFalse(bicepCurls0.equals((Object)bicepCurls2));
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(1250, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      
      List<PlanoTreino.AtividadeIteracoes> list1 = planoTreino0.getAtividades();
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(list1.contains(planoTreino_AtividadeIteracoes0));
      assertFalse(list1.equals((Object)list0));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino2 = (PlanoTreino)planoTreino1.clone();
      assertNotNull(planoTreino2);
      assertNotSame(planoTreino2, planoTreino0);
      assertNotSame(planoTreino2, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino2);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino2.equals((Object)planoTreino0));
      assertFalse(planoTreino2.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino2.getCodPlano());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-393L));
      assertNotNull(localDate0);
      
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      assertNotNull(planoTreino0);
      assertEquals(1, planoTreino0.getCodPlano());
      
      int int0 = 2;
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("h{;yV'tI]`#P]pcz-tL", "dd/MM/yyyy", "h{;yV'tI]`#P]pcz-tL", 2, 1909, (-1351), localDate0, 'I');
      assertNotNull(utilizadorPraticanteOcasional0);
      assertEquals('I', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(2, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional0.getEmail());
      assertEquals("dd/MM/yyyy", utilizadorPraticanteOcasional0.getMorada());
      assertEquals((-1351), utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1.25, utilizadorPraticanteOcasional0.getFatorMultiplicativo(), 0.01);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(1909.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional0.getNome());
      
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0);
      assertNotNull(utilizadorPraticanteOcasional1);
      assertTrue(utilizadorPraticanteOcasional1.equals((Object)utilizadorPraticanteOcasional0));
      assertEquals('I', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(2, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional0.getEmail());
      assertEquals("dd/MM/yyyy", utilizadorPraticanteOcasional0.getMorada());
      assertEquals((-1351), utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1.25, utilizadorPraticanteOcasional0.getFatorMultiplicativo(), 0.01);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(1909.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional0.getNome());
      assertEquals('I', utilizadorPraticanteOcasional1.getGenero());
      assertEquals(2, utilizadorPraticanteOcasional1.getFreqCardiaca());
      assertEquals("dd/MM/yyyy", utilizadorPraticanteOcasional1.getMorada());
      assertEquals((-1351), utilizadorPraticanteOcasional1.getAltura());
      assertEquals(1.25, utilizadorPraticanteOcasional1.getFatorMultiplicativo(), 0.01);
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional1.getEmail());
      assertEquals(1, utilizadorPraticanteOcasional1.getCodUtilizador());
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional1.getNome());
      assertEquals(1909.0, utilizadorPraticanteOcasional1.getPeso(), 0.01);
      
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      assertNotNull(utilizadorAmador0);
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorPraticanteOcasional0);
      assertNotNull(predicate0);
      assertNotSame(utilizadorPraticanteOcasional0, utilizadorPraticanteOcasional1);
      assertTrue(utilizadorPraticanteOcasional0.equals((Object)utilizadorPraticanteOcasional1));
      assertEquals('I', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(2, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional0.getEmail());
      assertEquals("dd/MM/yyyy", utilizadorPraticanteOcasional0.getMorada());
      assertEquals((-1351), utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1.25, utilizadorPraticanteOcasional0.getFatorMultiplicativo(), 0.01);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(1909.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional0.getNome());
      
      List<Atividade> list0 = utilizadorAmador0.atividadesIsoladas(localDate0, localDate0, predicate0);
      assertNotNull(list0);
      assertNotSame(utilizadorPraticanteOcasional0, utilizadorPraticanteOcasional1);
      assertTrue(utilizadorPraticanteOcasional0.equals((Object)utilizadorPraticanteOcasional1));
      assertEquals('I', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(2, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional0.getEmail());
      assertEquals("dd/MM/yyyy", utilizadorPraticanteOcasional0.getMorada());
      assertEquals((-1351), utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1.25, utilizadorPraticanteOcasional0.getFatorMultiplicativo(), 0.01);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(1909.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional0.getNome());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<PlanoTreino> list1 = planoTreino0.geraPlanoTreino(utilizadorPraticanteOcasional1, list0, (-1351), (-413), 2, localDate0);
      assertNotNull(list1);
      assertNotSame(utilizadorPraticanteOcasional0, utilizadorPraticanteOcasional1);
      assertNotSame(utilizadorPraticanteOcasional1, utilizadorPraticanteOcasional0);
      assertFalse(list1.contains(planoTreino0));
      assertTrue(utilizadorPraticanteOcasional0.equals((Object)utilizadorPraticanteOcasional1));
      assertTrue(utilizadorPraticanteOcasional1.equals((Object)utilizadorPraticanteOcasional0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals('I', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(2, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional0.getEmail());
      assertEquals("dd/MM/yyyy", utilizadorPraticanteOcasional0.getMorada());
      assertEquals((-1351), utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1.25, utilizadorPraticanteOcasional0.getFatorMultiplicativo(), 0.01);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(1909.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional0.getNome());
      assertEquals('I', utilizadorPraticanteOcasional1.getGenero());
      assertEquals(2, utilizadorPraticanteOcasional1.getFreqCardiaca());
      assertEquals("dd/MM/yyyy", utilizadorPraticanteOcasional1.getMorada());
      assertEquals((-1351), utilizadorPraticanteOcasional1.getAltura());
      assertEquals(1.25, utilizadorPraticanteOcasional1.getFatorMultiplicativo(), 0.01);
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional1.getEmail());
      assertEquals(1, utilizadorPraticanteOcasional1.getCodUtilizador());
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional1.getNome());
      assertEquals(1909.0, utilizadorPraticanteOcasional1.getPeso(), 0.01);
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.clone();
      assertNotNull(planoTreino1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(1, planoTreino1.getCodPlano());
      
      planoTreino0.setDataRealizacao(localDate0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(1, planoTreino0.getCodPlano());
      
      List<PlanoTreino> list2 = planoTreino0.geraPlanoTreino(utilizadorPraticanteOcasional1, list0, 0, (-572), (-413), localDate0);
      assertNotNull(list2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(utilizadorPraticanteOcasional0, utilizadorPraticanteOcasional1);
      assertNotSame(utilizadorPraticanteOcasional1, utilizadorPraticanteOcasional0);
      assertNotSame(list2, list1);
      assertFalse(list2.contains(planoTreino0));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(utilizadorPraticanteOcasional0.equals((Object)utilizadorPraticanteOcasional1));
      assertTrue(utilizadorPraticanteOcasional1.equals((Object)utilizadorPraticanteOcasional0));
      assertTrue(list2.equals((Object)list1));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals('I', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(2, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional0.getEmail());
      assertEquals("dd/MM/yyyy", utilizadorPraticanteOcasional0.getMorada());
      assertEquals((-1351), utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1.25, utilizadorPraticanteOcasional0.getFatorMultiplicativo(), 0.01);
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(1909.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional0.getNome());
      assertEquals('I', utilizadorPraticanteOcasional1.getGenero());
      assertEquals(2, utilizadorPraticanteOcasional1.getFreqCardiaca());
      assertEquals("dd/MM/yyyy", utilizadorPraticanteOcasional1.getMorada());
      assertEquals((-1351), utilizadorPraticanteOcasional1.getAltura());
      assertEquals(1.25, utilizadorPraticanteOcasional1.getFatorMultiplicativo(), 0.01);
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional1.getEmail());
      assertEquals(1, utilizadorPraticanteOcasional1.getCodUtilizador());
      assertEquals("h{;yV'tI]`#P]pcz-tL", utilizadorPraticanteOcasional1.getNome());
      assertEquals(1909.0, utilizadorPraticanteOcasional1.getPeso(), 0.01);
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      planoTreino0.setDataRealizacao(localDate0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(1, planoTreino0.getCodPlano());
      
      List<PlanoTreino.AtividadeIteracoes> list3 = planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      assertNotNull(list3);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(1, planoTreino0.getCodPlano());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      
      int int1 = 3608;
      // Undeclared exception!
      try { 
        MockInstant.from(localDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain Instant from TemporalAccessor: 1968-12-04 of type java.time.LocalDate
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      ZoneId zoneId0 = ZoneId.ofOffset("", zoneOffset0);
      assertNotNull(zoneId0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      
      Clock clock0 = MockClock.tickMinutes(zoneId0);
      assertNotNull(clock0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      assertNotNull(localDate0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "lQX;SC(6", "lQX;SC(6", (-4694), (-4694), 0, localDate0, 'z');
      assertNotNull(utilizadorAmador0);
      assertEquals('z', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals((-4694), utilizadorAmador0.getFreqCardiaca());
      assertEquals("lQX;SC(6", utilizadorAmador0.getEmail());
      assertEquals("lQX;SC(6", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals((-4694.0), utilizadorAmador0.getPeso(), 0.01);
      
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(349);
      assertNotNull(planoTreino0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      assertEquals('z', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals((-4694), utilizadorAmador0.getFreqCardiaca());
      assertEquals("lQX;SC(6", utilizadorAmador0.getEmail());
      assertEquals("lQX;SC(6", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals((-4694.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      
      planoTreino0.setProximoCodigo(1863);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      assertEquals('z', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals((-4694), utilizadorAmador0.getFreqCardiaca());
      assertEquals("lQX;SC(6", utilizadorAmador0.getEmail());
      assertEquals("lQX;SC(6", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals((-4694.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      
      List<Atividade> list0 = utilizadorAmador0.getAtividadesIsoladas();
      assertNotNull(list0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      assertEquals('z', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals((-4694), utilizadorAmador0.getFreqCardiaca());
      assertEquals("lQX;SC(6", utilizadorAmador0.getEmail());
      assertEquals("lQX;SC(6", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals((-4694.0), utilizadorAmador0.getPeso(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<PlanoTreino> list1 = planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, (-4694), 0, (-4694), localDate0);
      assertNotNull(list1);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      assertFalse(list1.contains(planoTreino0));
      assertEquals('z', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals((-4694), utilizadorAmador0.getFreqCardiaca());
      assertEquals("lQX;SC(6", utilizadorAmador0.getEmail());
      assertEquals("lQX;SC(6", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals((-4694.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(152L);
      assertNotNull(localDate0);
      
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      assertNotNull(planoTreino0);
      assertEquals(1, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino1 = new PlanoTreino();
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino1.getCodPlano());
      
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino1);
      assertNotNull(predicate0);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino1.getCodPlano());
      
      Abdominais abdominais0 = new Abdominais();
      assertNotNull(abdominais0);
      assertEquals(0, abdominais0.getRepeticoes());
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
      
      boolean boolean0 = predicate0.test(abdominais0);
      assertFalse(boolean0);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, abdominais0.getRepeticoes());
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
      
      boolean boolean1 = predicate0.test(abdominais0);
      assertFalse(boolean1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, abdominais0.getRepeticoes());
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
      
      List<Atividade> list0 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      assertNotNull(list0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Predicate<Atividade> predicate1 = Predicate.isEqual((Object) null);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      List<Atividade> list1 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate1);
      assertNotNull(list1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(list1, list0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertTrue(list1.equals((Object)list0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      PlanoTreino planoTreino2 = (PlanoTreino)planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      assertNotNull(planoTreino2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino2, planoTreino0);
      assertNotSame(planoTreino2, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino2.equals((Object)planoTreino0));
      assertFalse(planoTreino2.equals((Object)planoTreino1));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(1, planoTreino2.getCodPlano());
      
      int int0 = planoTreino1.compareTo(planoTreino0);
      assertEquals(44, int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(planoTreino1, planoTreino2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertFalse(planoTreino1.equals((Object)planoTreino2));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      String string0 = planoTreino0.toString();
      assertEquals("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 1970-06-02\nAtividades e suas itera\u00E7oes: \n", string0);
      assertNotNull(string0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertEquals(1, planoTreino0.getCodPlano());
      
      List<Atividade> list2 = planoTreino1.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      assertNotNull(list2);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(planoTreino1, planoTreino2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertFalse(planoTreino1.equals((Object)planoTreino2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertEquals(0, planoTreino1.getCodPlano());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      planoTreino1.setDataRealizacao(localDate0);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(planoTreino1, planoTreino2);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertFalse(planoTreino1.equals((Object)planoTreino2));
      assertEquals(0, planoTreino1.getCodPlano());
      
      String string1 = planoTreino1.toString();
      assertEquals("Plano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 1970-06-02\nAtividades e suas itera\u00E7oes: \n", string1);
      assertNotNull(string1);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(planoTreino1, planoTreino2);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertFalse(planoTreino1.equals((Object)planoTreino2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, planoTreino1.getCodPlano());
      
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      assertNotNull(localDate1);
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertEquals(1, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino3 = new PlanoTreino(planoTreino0);
      assertNotNull(planoTreino3);
      assertFalse(planoTreino3.equals((Object)planoTreino2));
      assertFalse(planoTreino3.equals((Object)planoTreino1));
      assertFalse(planoTreino3.equals((Object)planoTreino0));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertEquals(1, planoTreino3.getCodPlano());
      assertEquals(1, planoTreino0.getCodPlano());
      
      List<PlanoTreino.AtividadeIteracoes> list3 = planoTreino3.getAtividadesNumPeriodo(localDate0, localDate0);
      assertNotNull(list3);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino3, planoTreino2);
      assertNotSame(planoTreino3, planoTreino1);
      assertNotSame(planoTreino3, planoTreino0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino3);
      assertNotSame(planoTreino0, planoTreino2);
      assertFalse(planoTreino3.equals((Object)planoTreino2));
      assertFalse(planoTreino3.equals((Object)planoTreino1));
      assertFalse(planoTreino3.equals((Object)planoTreino0));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino3));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertEquals(1, planoTreino3.getCodPlano());
      assertEquals(1, planoTreino0.getCodPlano());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      
      List<PlanoTreino.AtividadeIteracoes> list4 = planoTreino3.getAtividadesNumPeriodo(localDate0, localDate1);
      assertNotNull(list4);
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino3, planoTreino2);
      assertNotSame(planoTreino3, planoTreino1);
      assertNotSame(planoTreino3, planoTreino0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino3);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(list4, list3);
      assertFalse(planoTreino3.equals((Object)planoTreino2));
      assertFalse(planoTreino3.equals((Object)planoTreino1));
      assertFalse(planoTreino3.equals((Object)planoTreino0));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino3));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertTrue(list4.equals((Object)list3));
      assertEquals(1, planoTreino3.getCodPlano());
      assertEquals(1, planoTreino0.getCodPlano());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      
      int int1 = planoTreino1.compareTo(planoTreino3);
      assertEquals((-1), int1);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino3, planoTreino2);
      assertNotSame(planoTreino3, planoTreino1);
      assertNotSame(planoTreino3, planoTreino0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino3);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(planoTreino1, planoTreino3);
      assertNotSame(planoTreino1, planoTreino2);
      assertFalse(planoTreino3.equals((Object)planoTreino2));
      assertFalse(planoTreino3.equals((Object)planoTreino1));
      assertFalse(planoTreino3.equals((Object)planoTreino0));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino3));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertFalse(planoTreino1.equals((Object)planoTreino3));
      assertFalse(planoTreino1.equals((Object)planoTreino2));
      assertFalse(int1 == int0);
      assertEquals(1, planoTreino3.getCodPlano());
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino0.setDataRealizacao(localDate1);
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino3);
      assertNotSame(planoTreino0, planoTreino2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino3));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertEquals(1, planoTreino0.getCodPlano());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(44, abdominais0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino3));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0, abdominais0.getRepeticoes());
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
      assertEquals(44, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      planoTreino_AtividadeIteracoes0.setAtividade(abdominais0);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino3);
      assertNotSame(planoTreino0, planoTreino2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino3));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0, abdominais0.getRepeticoes());
      assertEquals(0, abdominais0.getFreqCardiaca());
      assertEquals(1, abdominais0.getCodAtividade());
      assertEquals(44, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      List<PlanoTreino.AtividadeIteracoes> list5 = planoTreino1.getAtividades();
      assertNotNull(list5);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(planoTreino1, planoTreino3);
      assertNotSame(planoTreino1, planoTreino2);
      assertNotSame(list5, list3);
      assertNotSame(list5, list4);
      assertFalse(list5.contains(planoTreino_AtividadeIteracoes0));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertFalse(planoTreino1.equals((Object)planoTreino3));
      assertFalse(planoTreino1.equals((Object)planoTreino2));
      assertTrue(list5.equals((Object)list4));
      assertTrue(list5.equals((Object)list3));
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, list5.size());
      assertTrue(list5.isEmpty());
      
      int int2 = planoTreino3.compareTo(planoTreino1);
      assertEquals(1, int2);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino3, planoTreino2);
      assertNotSame(planoTreino3, planoTreino1);
      assertNotSame(planoTreino3, planoTreino0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino3);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(planoTreino1, planoTreino3);
      assertNotSame(planoTreino1, planoTreino2);
      assertFalse(planoTreino3.equals((Object)planoTreino2));
      assertFalse(planoTreino3.equals((Object)planoTreino1));
      assertFalse(planoTreino3.equals((Object)planoTreino0));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino3));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertFalse(planoTreino1.equals((Object)planoTreino3));
      assertFalse(planoTreino1.equals((Object)planoTreino2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, planoTreino3.getCodPlano());
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = null;
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      assertNotNull(planoTreino0);
      assertEquals(1, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(1, planoTreino1.getCodPlano());
      
      // Undeclared exception!
      try { 
        planoTreino1.compareTo(planoTreino0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1374;
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nTipo de atividade: Leg press\n", "\nTipo de atividade: Leg press\n", "A/:o$Z$dl16{g~?|o", (-185), (-185), 1374, (LocalDate) null, '9');
      assertNotNull(utilizadorAmador0);
      assertEquals("\nTipo de atividade: Leg press\n", utilizadorAmador0.getMorada());
      assertEquals('9', utilizadorAmador0.getGenero());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("\nTipo de atividade: Leg press\n", utilizadorAmador0.getNome());
      assertEquals(1374, utilizadorAmador0.getAltura());
      assertEquals((-185), utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-185.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("A/:o$Z$dl16{g~?|o", utilizadorAmador0.getEmail());
      
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(1374);
      assertNotNull(planoTreino0);
      assertEquals("\nTipo de atividade: Leg press\n", utilizadorAmador0.getMorada());
      assertEquals('9', utilizadorAmador0.getGenero());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("\nTipo de atividade: Leg press\n", utilizadorAmador0.getNome());
      assertEquals(1374, utilizadorAmador0.getAltura());
      assertEquals((-185), utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-185.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("A/:o$Z$dl16{g~?|o", utilizadorAmador0.getEmail());
      assertEquals(0, planoTreino0.getCodPlano());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      Btt btt0 = new Btt(localDateTime0, (LocalTime) null, (-185), 0.0, 2199.769887743862);
      assertNotNull(btt0);
      assertEquals(1, btt0.getCodAtividade());
      assertEquals(2199.769887743862, btt0.getAltimetria(), 0.01);
      assertEquals(1.2500000000000002, btt0.getFatorHard(), 0.01);
      assertEquals(1.099884943871931, btt0.getFatorAltimetria(), 0.01);
      assertEquals(0.0, btt0.getDistancia(), 0.01);
      assertEquals((-185), btt0.getFreqCardiaca());
      
      Btt btt1 = new Btt(btt0);
      assertNotNull(btt1);
      assertEquals(1, btt0.getCodAtividade());
      assertEquals(2199.769887743862, btt0.getAltimetria(), 0.01);
      assertEquals(1.2500000000000002, btt0.getFatorHard(), 0.01);
      assertEquals(1.099884943871931, btt0.getFatorAltimetria(), 0.01);
      assertEquals(0.0, btt0.getDistancia(), 0.01);
      assertEquals((-185), btt0.getFreqCardiaca());
      assertEquals(2199.769887743862, btt1.getAltimetria(), 0.01);
      assertEquals(0.0, btt1.getDistancia(), 0.01);
      assertEquals((-185), btt1.getFreqCardiaca());
      assertEquals(1.2500000000000002, btt1.getFatorHard(), 0.01);
      assertEquals(1.099884943871931, btt1.getFatorAltimetria(), 0.01);
      assertEquals(1, btt1.getCodAtividade());
      
      PlanoTreino planoTreino1 = utilizadorAmador0.getPlanoTreinoId(914);
      assertNotNull(planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals("\nTipo de atividade: Leg press\n", utilizadorAmador0.getMorada());
      assertEquals('9', utilizadorAmador0.getGenero());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("\nTipo de atividade: Leg press\n", utilizadorAmador0.getNome());
      assertEquals(1374, utilizadorAmador0.getAltura());
      assertEquals((-185), utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-185.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("A/:o$Z$dl16{g~?|o", utilizadorAmador0.getEmail());
      assertEquals(0, planoTreino1.getCodPlano());
      
      int int1 = planoTreino0.compareTo(planoTreino1);
      assertEquals(0, int1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertFalse(int1 == int0);
      assertEquals("\nTipo de atividade: Leg press\n", utilizadorAmador0.getMorada());
      assertEquals('9', utilizadorAmador0.getGenero());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("\nTipo de atividade: Leg press\n", utilizadorAmador0.getNome());
      assertEquals(1374, utilizadorAmador0.getAltura());
      assertEquals((-185), utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-185.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("A/:o$Z$dl16{g~?|o", utilizadorAmador0.getEmail());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      btt0.setDistancia((-185));
      assertNotSame(btt0, btt1);
      assertEquals(1, btt0.getCodAtividade());
      assertEquals(2199.769887743862, btt0.getAltimetria(), 0.01);
      assertEquals(1.2500000000000002, btt0.getFatorHard(), 0.01);
      assertEquals(1.099884943871931, btt0.getFatorAltimetria(), 0.01);
      assertEquals((-185.0), btt0.getDistancia(), 0.01);
      assertEquals((-185), btt0.getFreqCardiaca());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(696, btt1);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals("\nTipo de atividade: Leg press\n", utilizadorAmador0.getMorada());
      assertEquals('9', utilizadorAmador0.getGenero());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("\nTipo de atividade: Leg press\n", utilizadorAmador0.getNome());
      assertEquals(1374, utilizadorAmador0.getAltura());
      assertEquals((-185), utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-185.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("A/:o$Z$dl16{g~?|o", utilizadorAmador0.getEmail());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, btt0.getCodAtividade());
      assertEquals(2199.769887743862, btt0.getAltimetria(), 0.01);
      assertEquals(1.2500000000000002, btt0.getFatorHard(), 0.01);
      assertEquals(1.099884943871931, btt0.getFatorAltimetria(), 0.01);
      assertEquals((-185.0), btt0.getDistancia(), 0.01);
      assertEquals((-185), btt0.getFreqCardiaca());
      assertEquals(2199.769887743862, btt1.getAltimetria(), 0.01);
      assertEquals(0.0, btt1.getDistancia(), 0.01);
      assertEquals((-185), btt1.getFreqCardiaca());
      assertEquals(1.2500000000000002, btt1.getFatorHard(), 0.01);
      assertEquals(1.099884943871931, btt1.getFatorAltimetria(), 0.01);
      assertEquals(1, btt1.getCodAtividade());
      assertEquals(696, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      assertNotNull(planoTreino_AtividadeIteracoes1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals("\nTipo de atividade: Leg press\n", utilizadorAmador0.getMorada());
      assertEquals('9', utilizadorAmador0.getGenero());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("\nTipo de atividade: Leg press\n", utilizadorAmador0.getNome());
      assertEquals(1374, utilizadorAmador0.getAltura());
      assertEquals((-185), utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-185.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("A/:o$Z$dl16{g~?|o", utilizadorAmador0.getEmail());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, btt0.getCodAtividade());
      assertEquals(2199.769887743862, btt0.getAltimetria(), 0.01);
      assertEquals(1.2500000000000002, btt0.getFatorHard(), 0.01);
      assertEquals(1.099884943871931, btt0.getFatorAltimetria(), 0.01);
      assertEquals((-185.0), btt0.getDistancia(), 0.01);
      assertEquals((-185), btt0.getFreqCardiaca());
      assertEquals(2199.769887743862, btt1.getAltimetria(), 0.01);
      assertEquals(0.0, btt1.getDistancia(), 0.01);
      assertEquals((-185), btt1.getFreqCardiaca());
      assertEquals(1.2500000000000002, btt1.getFatorHard(), 0.01);
      assertEquals(1.099884943871931, btt1.getFatorAltimetria(), 0.01);
      assertEquals(1, btt1.getCodAtividade());
      assertEquals(696, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(696, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      Btt btt2 = (Btt)planoTreino_AtividadeIteracoes1.getAtividade();
      assertNotNull(btt2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(btt0, btt1);
      assertNotSame(btt0, btt2);
      assertNotSame(btt1, btt0);
      assertNotSame(btt1, btt2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertNotSame(btt2, btt0);
      assertNotSame(btt2, btt1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals("\nTipo de atividade: Leg press\n", utilizadorAmador0.getMorada());
      assertEquals('9', utilizadorAmador0.getGenero());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("\nTipo de atividade: Leg press\n", utilizadorAmador0.getNome());
      assertEquals(1374, utilizadorAmador0.getAltura());
      assertEquals((-185), utilizadorAmador0.getFreqCardiaca());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-185.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("A/:o$Z$dl16{g~?|o", utilizadorAmador0.getEmail());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1, btt0.getCodAtividade());
      assertEquals(2199.769887743862, btt0.getAltimetria(), 0.01);
      assertEquals(1.2500000000000002, btt0.getFatorHard(), 0.01);
      assertEquals(1.099884943871931, btt0.getFatorAltimetria(), 0.01);
      assertEquals((-185.0), btt0.getDistancia(), 0.01);
      assertEquals((-185), btt0.getFreqCardiaca());
      assertEquals(2199.769887743862, btt1.getAltimetria(), 0.01);
      assertEquals(0.0, btt1.getDistancia(), 0.01);
      assertEquals((-185), btt1.getFreqCardiaca());
      assertEquals(1.2500000000000002, btt1.getFatorHard(), 0.01);
      assertEquals(1.099884943871931, btt1.getFatorAltimetria(), 0.01);
      assertEquals(1, btt1.getCodAtividade());
      assertEquals(696, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(696, planoTreino_AtividadeIteracoes1.getIteracoes());
      assertEquals(1.099884943871931, btt2.getFatorAltimetria(), 0.01);
      assertEquals(0.0, btt2.getDistancia(), 0.01);
      assertEquals(1.2500000000000002, btt2.getFatorHard(), 0.01);
      assertEquals((-185), btt2.getFreqCardiaca());
      assertEquals(2199.769887743862, btt2.getAltimetria(), 0.01);
      assertEquals(1, btt2.getCodAtividade());
      
      // Undeclared exception!
      try { 
        planoTreino0.getAtividadesNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      int int0 = 5;
      Atividade atividade0 = null;
      int int1 = (-1347);
      // Undeclared exception!
      try { 
        planoTreino0.addAtividade((Atividade) null, (-1347));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("TdA;E? Ek5p", "TdA;E? Ek5p", "TdA;E? Ek5p", (-1447), (-847), 77, localDate0, '\"');
      assertNotNull(utilizadorAmador0);
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getNome());
      assertEquals(77, utilizadorAmador0.getAltura());
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getEmail());
      assertEquals((-847.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\"', utilizadorAmador0.getGenero());
      assertEquals((-1447), utilizadorAmador0.getFreqCardiaca());
      
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      assertNotNull(utilizadorAmador1);
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getNome());
      assertEquals(77, utilizadorAmador0.getAltura());
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getEmail());
      assertEquals((-847.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\"', utilizadorAmador0.getGenero());
      assertEquals((-1447), utilizadorAmador0.getFreqCardiaca());
      assertEquals((-1447), utilizadorAmador1.getFreqCardiaca());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getMorada());
      assertEquals((-847.0), utilizadorAmador1.getPeso(), 0.01);
      assertEquals('\"', utilizadorAmador1.getGenero());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getNome());
      assertEquals(1.0, utilizadorAmador1.getFatorMultiplicativo(), 0.01);
      assertEquals(1, utilizadorAmador1.getCodUtilizador());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getEmail());
      assertEquals(77, utilizadorAmador1.getAltura());
      
      PlanoTreino planoTreino0 = utilizadorAmador1.getPlanoTreinoId((-1447));
      assertNotNull(planoTreino0);
      assertNotSame(utilizadorAmador0, utilizadorAmador1);
      assertNotSame(utilizadorAmador1, utilizadorAmador0);
      assertTrue(utilizadorAmador0.equals((Object)utilizadorAmador1));
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getNome());
      assertEquals(77, utilizadorAmador0.getAltura());
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getEmail());
      assertEquals((-847.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\"', utilizadorAmador0.getGenero());
      assertEquals((-1447), utilizadorAmador0.getFreqCardiaca());
      assertEquals((-1447), utilizadorAmador1.getFreqCardiaca());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getMorada());
      assertEquals((-847.0), utilizadorAmador1.getPeso(), 0.01);
      assertEquals('\"', utilizadorAmador1.getGenero());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getNome());
      assertEquals(1.0, utilizadorAmador1.getFatorMultiplicativo(), 0.01);
      assertEquals(1, utilizadorAmador1.getCodUtilizador());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getEmail());
      assertEquals(77, utilizadorAmador1.getAltura());
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      assertNotNull(planoTreino1);
      assertTrue(utilizadorAmador0.equals((Object)utilizadorAmador1));
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getNome());
      assertEquals(77, utilizadorAmador0.getAltura());
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getEmail());
      assertEquals((-847.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\"', utilizadorAmador0.getGenero());
      assertEquals((-1447), utilizadorAmador0.getFreqCardiaca());
      assertEquals((-1447), utilizadorAmador1.getFreqCardiaca());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getMorada());
      assertEquals((-847.0), utilizadorAmador1.getPeso(), 0.01);
      assertEquals('\"', utilizadorAmador1.getGenero());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getNome());
      assertEquals(1.0, utilizadorAmador1.getFatorMultiplicativo(), 0.01);
      assertEquals(1, utilizadorAmador1.getCodUtilizador());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getEmail());
      assertEquals(77, utilizadorAmador1.getAltura());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      Flexoes flexoes0 = new Flexoes();
      assertNotNull(flexoes0);
      assertEquals(1, flexoes0.getCodAtividade());
      assertEquals(0, flexoes0.getRepeticoes());
      assertEquals(0, flexoes0.getFreqCardiaca());
      
      Flexoes flexoes1 = (Flexoes)flexoes0.geraAtividade(utilizadorAmador1, 0.0);
      assertNotNull(flexoes1);
      assertNotSame(utilizadorAmador0, utilizadorAmador1);
      assertNotSame(utilizadorAmador1, utilizadorAmador0);
      assertNotSame(flexoes0, flexoes1);
      assertNotSame(flexoes1, flexoes0);
      assertTrue(utilizadorAmador0.equals((Object)utilizadorAmador1));
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      assertTrue(flexoes1.equals((Object)flexoes0));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getNome());
      assertEquals(77, utilizadorAmador0.getAltura());
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getEmail());
      assertEquals((-847.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\"', utilizadorAmador0.getGenero());
      assertEquals((-1447), utilizadorAmador0.getFreqCardiaca());
      assertEquals((-1447), utilizadorAmador1.getFreqCardiaca());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getMorada());
      assertEquals((-847.0), utilizadorAmador1.getPeso(), 0.01);
      assertEquals('\"', utilizadorAmador1.getGenero());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getNome());
      assertEquals(1.0, utilizadorAmador1.getFatorMultiplicativo(), 0.01);
      assertEquals(1, utilizadorAmador1.getCodUtilizador());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getEmail());
      assertEquals(77, utilizadorAmador1.getAltura());
      assertEquals(1, flexoes0.getCodAtividade());
      assertEquals(0, flexoes0.getRepeticoes());
      assertEquals(0, flexoes0.getFreqCardiaca());
      assertEquals(0, flexoes1.getFreqCardiaca());
      assertEquals(2, flexoes1.getCodAtividade());
      assertEquals(0, flexoes1.getRepeticoes());
      
      planoTreino1.addAtividade(flexoes1, 10);
      assertNotSame(utilizadorAmador0, utilizadorAmador1);
      assertNotSame(utilizadorAmador1, utilizadorAmador0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(flexoes0, flexoes1);
      assertNotSame(flexoes1, flexoes0);
      assertTrue(utilizadorAmador0.equals((Object)utilizadorAmador1));
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(flexoes0.equals((Object)flexoes1));
      assertTrue(flexoes1.equals((Object)flexoes0));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getNome());
      assertEquals(77, utilizadorAmador0.getAltura());
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("TdA;E? Ek5p", utilizadorAmador0.getEmail());
      assertEquals((-847.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\"', utilizadorAmador0.getGenero());
      assertEquals((-1447), utilizadorAmador0.getFreqCardiaca());
      assertEquals((-1447), utilizadorAmador1.getFreqCardiaca());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getMorada());
      assertEquals((-847.0), utilizadorAmador1.getPeso(), 0.01);
      assertEquals('\"', utilizadorAmador1.getGenero());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getNome());
      assertEquals(1.0, utilizadorAmador1.getFatorMultiplicativo(), 0.01);
      assertEquals(1, utilizadorAmador1.getCodUtilizador());
      assertEquals("TdA;E? Ek5p", utilizadorAmador1.getEmail());
      assertEquals(77, utilizadorAmador1.getAltura());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(1, flexoes0.getCodAtividade());
      assertEquals(0, flexoes0.getRepeticoes());
      assertEquals(0, flexoes0.getFreqCardiaca());
      assertEquals(0, flexoes1.getFreqCardiaca());
      assertEquals(2, flexoes1.getCodAtividade());
      assertEquals(0, flexoes1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      LocalDate localDate0 = MockLocalDate.ofYearDay(70, 70);
      assertNotNull(localDate0);
      
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      assertNotNull(predicate0);
      
      List<Atividade> list0 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      assertNotNull(list0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        MockLocalDate.of((-780), 0, (-780));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      PlanoTreino planoTreino2 = (PlanoTreino)planoTreino1.clone();
      assertNotNull(planoTreino2);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(planoTreino1, planoTreino2);
      assertNotSame(planoTreino2, planoTreino1);
      assertNotSame(planoTreino2, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertFalse(planoTreino2.equals((Object)planoTreino1));
      assertFalse(planoTreino2.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, planoTreino2.getCodPlano());
      
      String string0 = "";
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(6, (-169));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): -169
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Month month0 = Month.JUNE;
      LocalDate localDate0 = MockLocalDate.of(1, month0, 1);
      assertNotNull(localDate0);
      
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      assertNotNull(planoTreino0);
      assertEquals(1, planoTreino0.getCodPlano());
      
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      assertNotNull(predicate0);
      
      List<Atividade> list0 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      assertNotNull(list0);
      assertEquals(1, planoTreino0.getCodPlano());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      int int0 = planoTreino0.getCodPlano();
      assertEquals(0, int0);
      assertEquals(0, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      assertNotNull(utilizadorAmador0);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals("", utilizadorAmador0.getEmail());
      
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      assertNotNull(planoTreino0);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(0, planoTreino0.getCodPlano());
      
      String string0 = planoTreino0.toString();
      assertEquals("Plano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", string0);
      assertNotNull(string0);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(0, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino1 = null;
      try {
        planoTreino1 = new PlanoTreino(planoTreino0, (LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      assertNotNull(localDate0);
      
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      assertNotNull(planoTreino0);
      assertEquals(1, planoTreino0.getCodPlano());
      
      Btt btt0 = new Btt();
      assertNotNull(btt0);
      assertEquals(1, btt0.getCodAtividade());
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
      assertEquals(0.0, btt0.getFatorAltimetria(), 0.01);
      assertEquals(0.0, btt0.getDistancia(), 0.01);
      assertEquals(0.0, btt0.getAltimetria(), 0.01);
      assertEquals(0, btt0.getFreqCardiaca());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, btt0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(1, btt0.getCodAtividade());
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
      assertEquals(0.0, btt0.getFatorAltimetria(), 0.01);
      assertEquals(0.0, btt0.getDistancia(), 0.01);
      assertEquals(0.0, btt0.getAltimetria(), 0.01);
      assertEquals(0, btt0.getFreqCardiaca());
      assertEquals(0, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      int int0 = planoTreino_AtividadeIteracoes0.getIteracoes();
      assertEquals(0, int0);
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(1, btt0.getCodAtividade());
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
      assertEquals(0.0, btt0.getFatorAltimetria(), 0.01);
      assertEquals(0.0, btt0.getDistancia(), 0.01);
      assertEquals(0.0, btt0.getAltimetria(), 0.01);
      assertEquals(0, btt0.getFreqCardiaca());
      assertEquals(0, planoTreino_AtividadeIteracoes0.getIteracoes());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(5, 5);
      assertNotNull(zoneOffset0);
      
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      assertNotNull(clock0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      assertNotNull(localDate0);
      
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      assertNotNull(planoTreino0);
      assertEquals(1, planoTreino0.getCodPlano());
      
      int int0 = planoTreino0.getCodPlano();
      assertEquals(1, int0);
      assertEquals(1, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      BicepCurls bicepCurls0 = new BicepCurls();
      assertNotNull(bicepCurls0);
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino1.new AtividadeIteracoes(4269, bicepCurls0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(4269, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      String string0 = planoTreino_AtividadeIteracoes0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bicep curls\nIteracoes: 4269\n", string0);
      assertNotNull(string0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(4269, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      planoTreino_AtividadeIteracoes0.setAtividade(bicepCurls0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(4269, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino1.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      assertNotNull(planoTreino_AtividadeIteracoes1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(4269, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(4269, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      LegPress legPress0 = new LegPress();
      assertNotNull(legPress0);
      assertEquals(0, legPress0.getRepeticoes());
      assertEquals(2, legPress0.getCodAtividade());
      assertEquals(0, legPress0.getFreqCardiaca());
      assertEquals(0.0, legPress0.getPeso(), 0.01);
      
      List<PlanoTreino.AtividadeIteracoes> list0 = planoTreino0.getAtividades();
      assertNotNull(list0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(list0.contains(planoTreino_AtividadeIteracoes0));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = planoTreino_AtividadeIteracoes1.equals(legPress0);
      assertFalse(boolean0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(4269, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(4269, planoTreino_AtividadeIteracoes1.getIteracoes());
      assertEquals(0, legPress0.getRepeticoes());
      assertEquals(2, legPress0.getCodAtividade());
      assertEquals(0, legPress0.getFreqCardiaca());
      assertEquals(0.0, legPress0.getPeso(), 0.01);
      
      String string1 = planoTreino_AtividadeIteracoes1.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bicep curls\nIteracoes: 4269\n", string1);
      assertNotNull(string1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(4269, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(4269, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      boolean boolean1 = planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes1);
      assertTrue(boolean1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(4269, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(4269, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      int int0 = planoTreino0.compareTo(planoTreino1);
      assertEquals(0, int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      BicepCurls bicepCurls1 = (BicepCurls)planoTreino_AtividadeIteracoes1.getAtividade();
      assertNotNull(bicepCurls1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(bicepCurls0, bicepCurls1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertNotSame(bicepCurls1, bicepCurls0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(bicepCurls1.equals((Object)bicepCurls0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(0, bicepCurls0.getRepeticoes());
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(4269, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(4269, planoTreino_AtividadeIteracoes1.getIteracoes());
      assertEquals(0.0, bicepCurls1.getPeso(), 0.01);
      assertEquals(0, bicepCurls1.getRepeticoes());
      assertEquals(1, bicepCurls1.getCodAtividade());
      assertEquals(0, bicepCurls1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      assertNotNull(planoTreino1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino0.setDataRealizacao(localDate0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino2 = new PlanoTreino();
      assertNotNull(planoTreino2);
      assertFalse(planoTreino2.equals((Object)planoTreino0));
      assertFalse(planoTreino2.equals((Object)planoTreino1));
      assertEquals(0, planoTreino2.getCodPlano());
      
      int int0 = planoTreino0.compareTo(planoTreino2);
      assertEquals(0, int0);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino2, planoTreino0);
      assertNotSame(planoTreino2, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino2.equals((Object)planoTreino0));
      assertFalse(planoTreino2.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino2.getCodPlano());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0, 0, zoneOffset0);
      assertNotNull(localDateTime0);
      
      LocalTime localTime0 = MockLocalTime.now();
      assertNotNull(localTime0);
      
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, 1, 1);
      assertNotNull(ciclismo0);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1, ciclismo0.getFreqCardiaca());
      assertEquals(1.0, ciclismo0.getDistancia(), 0.01);
      
      Ciclismo ciclismo1 = new Ciclismo(ciclismo0);
      assertNotNull(ciclismo1);
      assertTrue(ciclismo1.equals((Object)ciclismo0));
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1, ciclismo0.getFreqCardiaca());
      assertEquals(1.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1.0, ciclismo1.getDistancia(), 0.01);
      assertEquals(1, ciclismo1.getCodAtividade());
      assertEquals(1, ciclismo1.getFreqCardiaca());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino2.new AtividadeIteracoes(0, ciclismo1);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino2.equals((Object)planoTreino0));
      assertFalse(planoTreino2.equals((Object)planoTreino1));
      assertTrue(ciclismo0.equals((Object)ciclismo1));
      assertTrue(ciclismo1.equals((Object)ciclismo0));
      assertEquals(0, planoTreino2.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1, ciclismo0.getFreqCardiaca());
      assertEquals(1.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1.0, ciclismo1.getDistancia(), 0.01);
      assertEquals(1, ciclismo1.getCodAtividade());
      assertEquals(1, ciclismo1.getFreqCardiaca());
      assertEquals(0, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      boolean boolean0 = planoTreino_AtividadeIteracoes0.equals(planoTreino0);
      assertFalse(boolean0);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino2, planoTreino0);
      assertNotSame(planoTreino2, planoTreino1);
      assertNotSame(ciclismo0, ciclismo1);
      assertNotSame(ciclismo1, ciclismo0);
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino2.equals((Object)planoTreino0));
      assertFalse(planoTreino2.equals((Object)planoTreino1));
      assertTrue(ciclismo0.equals((Object)ciclismo1));
      assertTrue(ciclismo1.equals((Object)ciclismo0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino2.getCodPlano());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1, ciclismo0.getFreqCardiaca());
      assertEquals(1.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(1.0, ciclismo1.getDistancia(), 0.01);
      assertEquals(1, ciclismo1.getCodAtividade());
      assertEquals(1, ciclismo1.getFreqCardiaca());
      assertEquals(0, planoTreino_AtividadeIteracoes0.getIteracoes());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PlanoTreino planoTreino0 = null;
      try {
        planoTreino0 = new PlanoTreino((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      Corrida corrida0 = new Corrida();
      assertNotNull(corrida0);
      assertEquals(0.0, corrida0.getDistancia(), 0.01);
      assertEquals(0, corrida0.getFreqCardiaca());
      assertEquals(1, corrida0.getCodAtividade());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(533, corrida0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, corrida0.getDistancia(), 0.01);
      assertEquals(0, corrida0.getFreqCardiaca());
      assertEquals(1, corrida0.getCodAtividade());
      assertEquals(533, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      assertNotNull(planoTreino_AtividadeIteracoes1);
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, corrida0.getDistancia(), 0.01);
      assertEquals(0, corrida0.getFreqCardiaca());
      assertEquals(1, corrida0.getCodAtividade());
      assertEquals(533, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(533, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      boolean boolean0 = planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      assertTrue(boolean0);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, corrida0.getDistancia(), 0.01);
      assertEquals(0, corrida0.getFreqCardiaca());
      assertEquals(1, corrida0.getCodAtividade());
      assertEquals(533, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(533, planoTreino_AtividadeIteracoes1.getIteracoes());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      Trail trail0 = new Trail();
      assertNotNull(trail0);
      assertEquals(1.15, trail0.getFatorHard(), 0.01);
      assertEquals(0.0, trail0.getDistancia(), 0.01);
      assertEquals(0.0, trail0.getFatorAltimetria(), 0.01);
      assertEquals(0, trail0.getFreqCardiaca());
      assertEquals(1, trail0.getCodAtividade());
      assertEquals(0.0, trail0.getAltimetria(), 0.01);
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, trail0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1.15, trail0.getFatorHard(), 0.01);
      assertEquals(0.0, trail0.getDistancia(), 0.01);
      assertEquals(0.0, trail0.getFatorAltimetria(), 0.01);
      assertEquals(0, trail0.getFreqCardiaca());
      assertEquals(1, trail0.getCodAtividade());
      assertEquals(0.0, trail0.getAltimetria(), 0.01);
      assertEquals(0, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      assertNotNull(planoTreino_AtividadeIteracoes1);
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1.15, trail0.getFatorHard(), 0.01);
      assertEquals(0.0, trail0.getDistancia(), 0.01);
      assertEquals(0.0, trail0.getFatorAltimetria(), 0.01);
      assertEquals(0, trail0.getFreqCardiaca());
      assertEquals(1, trail0.getCodAtividade());
      assertEquals(0.0, trail0.getAltimetria(), 0.01);
      assertEquals(0, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = (PlanoTreino.AtividadeIteracoes)planoTreino_AtividadeIteracoes1.clone();
      assertNotNull(planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes2);
      assertNotSame(planoTreino_AtividadeIteracoes2, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes2, planoTreino_AtividadeIteracoes0);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes2.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(1.15, trail0.getFatorHard(), 0.01);
      assertEquals(0.0, trail0.getDistancia(), 0.01);
      assertEquals(0.0, trail0.getFatorAltimetria(), 0.01);
      assertEquals(0, trail0.getFreqCardiaca());
      assertEquals(1, trail0.getCodAtividade());
      assertEquals(0.0, trail0.getAltimetria(), 0.01);
      assertEquals(0, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, planoTreino_AtividadeIteracoes1.getIteracoes());
      assertEquals(0, planoTreino_AtividadeIteracoes2.getIteracoes());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = null;
      try {
        planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((PlanoTreino.AtividadeIteracoes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.PlanoTreino$AtividadeIteracoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      assertNotNull(planoTreino0);
      assertEquals(1, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate0, localDate0);
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(1, planoTreino1.getCodPlano());
      
      planoTreino1.setProximoCodigo((-3459));
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(1, planoTreino1.getCodPlano());
      
      int int0 = planoTreino0.compareTo(planoTreino1);
      assertEquals(0, int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(1, planoTreino1.getCodPlano());
      
      planoTreino0.setDataRealizacao(localDate0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(1, planoTreino0.getCodPlano());
      
      double double0 = planoTreino1.caloriasDispendidas((Utilizador) null);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(1, planoTreino1.getCodPlano());
      
      List<PlanoTreino.AtividadeIteracoes> list0 = planoTreino1.getAtividadesNumPeriodo(localDate0, localDate0);
      assertNotNull(list0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(1, planoTreino1.getCodPlano());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      LocalDate localDate1 = planoTreino1.getDataRealizacao();
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertSame(localDate1, localDate0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(1, planoTreino1.getCodPlano());
      
      LocalDate localDate2 = MockLocalDate.now();
      assertNotNull(localDate2);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate1);
      assertTrue(localDate2.equals((Object)localDate1));
      assertTrue(localDate2.equals((Object)localDate0));
      
      PlanoTreino planoTreino2 = (PlanoTreino)planoTreino1.planoTreinoNumPeriodo(localDate1, localDate2);
      assertNotNull(planoTreino2);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino1, planoTreino2);
      assertNotSame(planoTreino1, planoTreino0);
      assertSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate1);
      assertNotSame(planoTreino2, planoTreino1);
      assertNotSame(planoTreino2, planoTreino0);
      assertTrue(localDate0.equals((Object)localDate2));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(localDate1.equals((Object)localDate2));
      assertTrue(localDate2.equals((Object)localDate1));
      assertTrue(localDate2.equals((Object)localDate0));
      assertFalse(planoTreino2.equals((Object)planoTreino1));
      assertFalse(planoTreino2.equals((Object)planoTreino0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(1, planoTreino1.getCodPlano());
      assertEquals(1, planoTreino2.getCodPlano());
      
      planoTreino1.setDataRealizacao(localDate1);
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino1, planoTreino2);
      assertNotSame(planoTreino1, planoTreino0);
      assertSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate2);
      assertTrue(localDate0.equals((Object)localDate2));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(planoTreino1.equals((Object)planoTreino2));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(localDate1.equals((Object)localDate2));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(1, planoTreino1.getCodPlano());
      
      planoTreino0.setProximoCodigo((-1417));
      assertSame(localDate0, localDate1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertTrue(localDate0.equals((Object)localDate2));
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertEquals(1, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      Corrida corrida0 = new Corrida();
      assertNotNull(corrida0);
      assertEquals(0.0, corrida0.getDistancia(), 0.01);
      assertEquals(0, corrida0.getFreqCardiaca());
      assertEquals(1, corrida0.getCodAtividade());
      
      double double0 = corrida0.getFatorVelocidade((-3258.09264), (-1375));
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, corrida0.getDistancia(), 0.01);
      assertEquals(0, corrida0.getFreqCardiaca());
      assertEquals(1, corrida0.getCodAtividade());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino1.new AtividadeIteracoes((-1375), corrida0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0.0, corrida0.getDistancia(), 0.01);
      assertEquals(0, corrida0.getFreqCardiaca());
      assertEquals(1, corrida0.getCodAtividade());
      assertEquals((-1375), planoTreino_AtividadeIteracoes0.getIteracoes());
      
      planoTreino_AtividadeIteracoes0.setIteracoes((-1375));
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0.0, corrida0.getDistancia(), 0.01);
      assertEquals(0, corrida0.getFreqCardiaca());
      assertEquals(1, corrida0.getCodAtividade());
      assertEquals((-1375), planoTreino_AtividadeIteracoes0.getIteracoes());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-1978), (Atividade) null);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals((-1978), planoTreino_AtividadeIteracoes0.getIteracoes());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      int int0 = planoTreino0.compareTo(planoTreino1);
      assertEquals(0, int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      assertNotNull(localDate0);
      
      PlanoTreino planoTreino2 = new PlanoTreino(planoTreino1, localDate0, localDate0);
      assertNotNull(planoTreino2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertFalse(planoTreino2.equals((Object)planoTreino0));
      assertFalse(planoTreino2.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, planoTreino2.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1808L));
      assertNotNull(localDate0);
      
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      assertNotNull(planoTreino0);
      assertEquals(1, planoTreino0.getCodPlano());
      
      planoTreino0.setDataRealizacao(localDate0);
      assertEquals(1, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      String string0 = planoTreino0.toString();
      assertEquals("Plano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", string0);
      assertNotNull(string0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      assertNotNull(utilizadorAmador0);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE_TIME;
      assertNotNull(dateTimeFormatter0);
      
      DecimalStyle decimalStyle0 = DecimalStyle.ofDefaultLocale();
      assertNotNull(decimalStyle0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDecimalStyle(decimalStyle0);
      assertNotNull(dateTimeFormatter1);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      
      // Undeclared exception!
      try { 
        MockLocalDate.parse((CharSequence) "Plano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n", dateTimeFormatter1);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'Plano de Treino
         // Codigo de Plano de Treino: 0
         // Data de realiza\u00E7ao:...' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      Trail trail0 = new Trail();
      assertNotNull(trail0);
      assertEquals(0.0, trail0.getDistancia(), 0.01);
      assertEquals(0.0, trail0.getFatorAltimetria(), 0.01);
      assertEquals(1.15, trail0.getFatorHard(), 0.01);
      assertEquals(0, trail0.getFreqCardiaca());
      assertEquals(1, trail0.getCodAtividade());
      assertEquals(0.0, trail0.getAltimetria(), 0.01);
      
      planoTreino0.addAtividade(trail0, 2188);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, trail0.getDistancia(), 0.01);
      assertEquals(0.0, trail0.getFatorAltimetria(), 0.01);
      assertEquals(1.15, trail0.getFatorHard(), 0.01);
      assertEquals(0, trail0.getFreqCardiaca());
      assertEquals(1, trail0.getCodAtividade());
      assertEquals(0.0, trail0.getAltimetria(), 0.01);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      ZoneId zoneId0 = zoneOffset0.normalized();
      assertNotNull(zoneId0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      
      ZoneId zoneId1 = zoneOffset0.normalized();
      assertNotNull(zoneId1);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneOffset0, zoneId1);
      assertSame(zoneId1, zoneId0);
      assertSame(zoneId1, zoneOffset0);
      
      LocalDate localDate0 = MockLocalDate.now(zoneId1);
      assertNotNull(localDate0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneOffset0, zoneId1);
      assertSame(zoneId1, zoneId0);
      assertSame(zoneId1, zoneOffset0);
      
      List<PlanoTreino.AtividadeIteracoes> list0 = planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      assertNotNull(list0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneOffset0, zoneId1);
      assertSame(zoneId1, zoneId0);
      assertSame(zoneId1, zoneOffset0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.planoTreinoNumPeriodo(localDate0, localDate0);
      assertNotNull(planoTreino1);
      assertNotSame(planoTreino0, planoTreino1);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneOffset0, zoneId1);
      assertSame(zoneId1, zoneId0);
      assertSame(zoneId1, zoneOffset0);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      assertNotNull(utilizadorAmador0);
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getNome());
      
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      assertNotNull(utilizadorAmador1);
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(1.0, utilizadorAmador1.getFatorMultiplicativo(), 0.01);
      assertEquals("", utilizadorAmador1.getEmail());
      assertEquals(0, utilizadorAmador1.getFreqCardiaca());
      assertEquals("", utilizadorAmador1.getNome());
      assertEquals(0, utilizadorAmador1.getCodUtilizador());
      assertEquals("", utilizadorAmador1.getMorada());
      assertEquals('\u0000', utilizadorAmador1.getGenero());
      assertEquals(0, utilizadorAmador1.getAltura());
      assertEquals(0.0, utilizadorAmador1.getPeso(), 0.01);
      
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) planoTreino0);
      assertNotNull(predicate0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(predicate1).test(any());
      Predicate<Atividade> predicate2 = predicate0.or(predicate1);
      assertNotNull(predicate2);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertEquals(0, planoTreino0.getCodPlano());
      
      Predicate<Atividade> predicate3 = predicate2.and(predicate0);
      assertNotNull(predicate3);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertEquals(0, planoTreino0.getCodPlano());
      
      Predicate<Atividade> predicate4 = predicate3.negate();
      assertNotNull(predicate4);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertEquals(0, planoTreino0.getCodPlano());
      
      List<Atividade> list1 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate4);
      assertNotNull(list1);
      assertNotSame(planoTreino0, planoTreino1);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneOffset0, zoneId1);
      assertSame(zoneId1, zoneId0);
      assertSame(zoneId1, zoneOffset0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      assertNotNull(localDate0);
      
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      assertNotNull(planoTreino0);
      assertEquals(1, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino1 = new PlanoTreino();
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino1.getCodPlano());
      
      int int0 = planoTreino0.compareTo(planoTreino1);
      assertEquals((-44), int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      List<PlanoTreino.AtividadeIteracoes> list0 = planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
      assertNotNull(list0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertSame(localDate1, localDate0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(1, planoTreino0.getCodPlano());
      
      PlanoTreino planoTreino2 = (PlanoTreino)planoTreino0.clone();
      assertNotNull(planoTreino2);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino2, planoTreino1);
      assertNotSame(planoTreino2, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino2.equals((Object)planoTreino1));
      assertFalse(planoTreino2.equals((Object)planoTreino0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(1, planoTreino2.getCodPlano());
      
      List<PlanoTreino.AtividadeIteracoes> list1 = planoTreino1.getAtividadesNumPeriodo(localDate0, localDate1);
      assertNotNull(list1);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino1, planoTreino2);
      assertNotSame(planoTreino1, planoTreino0);
      assertSame(localDate1, localDate0);
      assertNotSame(list1, list0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(planoTreino1.equals((Object)planoTreino2));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(list1.equals((Object)list0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      assertNotNull(localTime0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate1, localTime0);
      assertNotNull(localDateTime0);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertSame(localDate1, localDate0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertEquals(1, planoTreino0.getCodPlano());
      
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, (-44), 13, 0.0);
      assertNotNull(benchPress0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0.0, benchPress0.getPeso(), 0.01);
      assertEquals((-44), benchPress0.getFreqCardiaca());
      assertEquals(1, benchPress0.getCodAtividade());
      assertEquals(13, benchPress0.getRepeticoes());
      
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("8i%krhw5U09i", "8i%krhw5U09i", "8i%krhw5U09i", 13, (-488), 70, localDate0, 'Q');
      assertNotNull(utilizadorAmador0);
      assertEquals(13, utilizadorAmador0.getFreqCardiaca());
      assertEquals(70, utilizadorAmador0.getAltura());
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getEmail());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-488.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getMorada());
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getNome());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals('Q', utilizadorAmador0.getGenero());
      
      BenchPress benchPress1 = (BenchPress)benchPress0.geraAtividade(utilizadorAmador0, 0L);
      assertNotNull(benchPress1);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertSame(localDate1, localDate0);
      assertNotSame(benchPress0, benchPress1);
      assertNotSame(benchPress1, benchPress0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(benchPress1.equals((Object)benchPress0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0.0, benchPress0.getPeso(), 0.01);
      assertEquals((-44), benchPress0.getFreqCardiaca());
      assertEquals(1, benchPress0.getCodAtividade());
      assertEquals(13, benchPress0.getRepeticoes());
      assertEquals(13, utilizadorAmador0.getFreqCardiaca());
      assertEquals(70, utilizadorAmador0.getAltura());
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getEmail());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-488.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getMorada());
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getNome());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals('Q', utilizadorAmador0.getGenero());
      assertEquals(2, benchPress1.getCodAtividade());
      assertEquals(0, benchPress1.getRepeticoes());
      assertEquals((-488.0), benchPress1.getPeso(), 0.01);
      assertEquals(0, benchPress1.getFreqCardiaca());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-44), benchPress1);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(benchPress0.equals((Object)benchPress1));
      assertFalse(benchPress1.equals((Object)benchPress0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0.0, benchPress0.getPeso(), 0.01);
      assertEquals((-44), benchPress0.getFreqCardiaca());
      assertEquals(1, benchPress0.getCodAtividade());
      assertEquals(13, benchPress0.getRepeticoes());
      assertEquals(13, utilizadorAmador0.getFreqCardiaca());
      assertEquals(70, utilizadorAmador0.getAltura());
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getEmail());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-488.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getMorada());
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getNome());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals('Q', utilizadorAmador0.getGenero());
      assertEquals(2, benchPress1.getCodAtividade());
      assertEquals(0, benchPress1.getRepeticoes());
      assertEquals((-488.0), benchPress1.getPeso(), 0.01);
      assertEquals(0, benchPress1.getFreqCardiaca());
      assertEquals((-44), planoTreino_AtividadeIteracoes0.getIteracoes());
      
      Flexoes flexoes0 = new Flexoes();
      assertNotNull(flexoes0);
      assertEquals(3, flexoes0.getCodAtividade());
      assertEquals(0, flexoes0.getRepeticoes());
      assertEquals(0, flexoes0.getFreqCardiaca());
      
      boolean boolean0 = planoTreino_AtividadeIteracoes0.equals(flexoes0);
      assertFalse(boolean0);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertSame(localDate1, localDate0);
      assertNotSame(benchPress0, benchPress1);
      assertNotSame(benchPress1, benchPress0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(benchPress0.equals((Object)benchPress1));
      assertFalse(benchPress1.equals((Object)benchPress0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0.0, benchPress0.getPeso(), 0.01);
      assertEquals((-44), benchPress0.getFreqCardiaca());
      assertEquals(1, benchPress0.getCodAtividade());
      assertEquals(13, benchPress0.getRepeticoes());
      assertEquals(13, utilizadorAmador0.getFreqCardiaca());
      assertEquals(70, utilizadorAmador0.getAltura());
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getEmail());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-488.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getMorada());
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getNome());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals('Q', utilizadorAmador0.getGenero());
      assertEquals(2, benchPress1.getCodAtividade());
      assertEquals(0, benchPress1.getRepeticoes());
      assertEquals((-488.0), benchPress1.getPeso(), 0.01);
      assertEquals(0, benchPress1.getFreqCardiaca());
      assertEquals((-44), planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(3, flexoes0.getCodAtividade());
      assertEquals(0, flexoes0.getRepeticoes());
      assertEquals(0, flexoes0.getFreqCardiaca());
      
      double double0 = planoTreino0.caloriasDispendidas(utilizadorAmador0);
      assertEquals(0.0, double0, 0.01);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(13, utilizadorAmador0.getFreqCardiaca());
      assertEquals(70, utilizadorAmador0.getAltura());
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getEmail());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-488.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getMorada());
      assertEquals("8i%krhw5U09i", utilizadorAmador0.getNome());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals('Q', utilizadorAmador0.getGenero());
      
      Btt btt0 = new Btt();
      assertNotNull(btt0);
      assertEquals(0.0, btt0.getDistancia(), 0.01);
      assertEquals(0.0, btt0.getAltimetria(), 0.01);
      assertEquals(0.0, btt0.getFatorAltimetria(), 0.01);
      assertEquals(0, btt0.getFreqCardiaca());
      assertEquals(4, btt0.getCodAtividade());
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
      
      Btt btt1 = new Btt();
      assertNotNull(btt1);
      assertTrue(btt1.equals((Object)btt0));
      assertEquals(1.05, btt1.getFatorHard(), 0.01);
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(5, btt1.getCodAtividade());
      assertEquals(0.0, btt1.getDistancia(), 0.01);
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
      assertEquals(0.0, btt1.getAltimetria(), 0.01);
      
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) btt1);
      assertNotNull(predicate0);
      assertNotSame(btt1, btt0);
      assertTrue(btt1.equals((Object)btt0));
      assertEquals(1.05, btt1.getFatorHard(), 0.01);
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(5, btt1.getCodAtividade());
      assertEquals(0.0, btt1.getDistancia(), 0.01);
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
      assertEquals(0.0, btt1.getAltimetria(), 0.01);
      
      List<Atividade> list2 = planoTreino1.atividadesQueRespeitamP(localDate1, localDate0, predicate0);
      assertNotNull(list2);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino0, planoTreino2);
      assertNotSame(planoTreino1, planoTreino2);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(btt1, btt0);
      assertSame(localDate1, localDate0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino0.equals((Object)planoTreino2));
      assertFalse(planoTreino1.equals((Object)planoTreino2));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertTrue(btt1.equals((Object)btt0));
      assertEquals(1, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(1.05, btt1.getFatorHard(), 0.01);
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(5, btt1.getCodAtividade());
      assertEquals(0.0, btt1.getDistancia(), 0.01);
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
      assertEquals(0.0, btt1.getAltimetria(), 0.01);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      System.setCurrentTimeMillis((-1334L));
      PlanoTreino planoTreino3 = (PlanoTreino)planoTreino1.planoTreinoNumPeriodo(localDate0, localDate0);
      assertNotNull(planoTreino3);
      assertSame(localDate0, localDate1);
      assertNotSame(planoTreino1, planoTreino2);
      assertNotSame(planoTreino1, planoTreino0);
      assertNotSame(planoTreino1, planoTreino3);
      assertNotSame(planoTreino3, planoTreino1);
      assertNotSame(planoTreino3, planoTreino0);
      assertNotSame(planoTreino3, planoTreino2);
      assertFalse(planoTreino1.equals((Object)planoTreino2));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertFalse(planoTreino3.equals((Object)planoTreino1));
      assertFalse(planoTreino3.equals((Object)planoTreino0));
      assertFalse(planoTreino3.equals((Object)planoTreino2));
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, planoTreino3.getCodPlano());
      
      BiFunction<Atividade, Utilizador, Atividade> biFunction0 = (BiFunction<Atividade, Utilizador, Atividade>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list2, (-44), 2588, (-488), localDate0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "dd/MM/yyyy HH:mm:ss";
      int int0 = 70;
      int int1 = 0;
      Month month0 = Month.FEBRUARY;
      LocalDate localDate0 = MockLocalDate.of(0, month0, 1);
      assertNotNull(localDate0);
      
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("C8=C95,*P^=SwXi0h", "dd/MM/yyyy HH:mm:ss", "C8=C95,*P^=SwXi0h", 5, 70, 0, localDate0, '0');
      assertNotNull(utilizadorAmador0);
      assertEquals("C8=C95,*P^=SwXi0h", utilizadorAmador0.getNome());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(5, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('0', utilizadorAmador0.getGenero());
      assertEquals("dd/MM/yyyy HH:mm:ss", utilizadorAmador0.getMorada());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("C8=C95,*P^=SwXi0h", utilizadorAmador0.getEmail());
      assertEquals(70.0, utilizadorAmador0.getPeso(), 0.01);
      
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(70);
      assertNotNull(planoTreino0);
      assertEquals("C8=C95,*P^=SwXi0h", utilizadorAmador0.getNome());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(5, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('0', utilizadorAmador0.getGenero());
      assertEquals("dd/MM/yyyy HH:mm:ss", utilizadorAmador0.getMorada());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("C8=C95,*P^=SwXi0h", utilizadorAmador0.getEmail());
      assertEquals(70.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      
      List<Atividade> list0 = utilizadorAmador0.allAtividades(localDate0, localDate0);
      assertNotNull(list0);
      assertEquals("C8=C95,*P^=SwXi0h", utilizadorAmador0.getNome());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(5, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('0', utilizadorAmador0.getGenero());
      assertEquals("dd/MM/yyyy HH:mm:ss", utilizadorAmador0.getMorada());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals("C8=C95,*P^=SwXi0h", utilizadorAmador0.getEmail());
      assertEquals(70.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      int int2 = 2;
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino((Utilizador) null, list0, 5, 2, 0.2, localDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2071));
      assertNotNull(localDate0);
      
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nData de realiza\u00E7ao: ", "\nData de realiza\u00E7ao: ", "\nData de realiza\u00E7ao: ", (-2071), 1792, 1854, localDate0, '%');
      assertNotNull(utilizadorPraticanteOcasional0);
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional0.getMorada());
      assertEquals(1854, utilizadorPraticanteOcasional0.getAltura());
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional0.getNome());
      assertEquals(1.25, utilizadorPraticanteOcasional0.getFatorMultiplicativo(), 0.01);
      assertEquals(1792.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals((-2071), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('%', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional0.getEmail());
      
      double double0 = planoTreino0.caloriasDispendidas(utilizadorPraticanteOcasional0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional0.getMorada());
      assertEquals(1854, utilizadorPraticanteOcasional0.getAltura());
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional0.getNome());
      assertEquals(1.25, utilizadorPraticanteOcasional0.getFatorMultiplicativo(), 0.01);
      assertEquals(1792.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals((-2071), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('%', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional0.getEmail());
      
      System.setCurrentTimeMillis((-2071));
      double double1 = planoTreino0.caloriasDispendidas(utilizadorPraticanteOcasional0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional0.getMorada());
      assertEquals(1854, utilizadorPraticanteOcasional0.getAltura());
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional0.getNome());
      assertEquals(1.25, utilizadorPraticanteOcasional0.getFatorMultiplicativo(), 0.01);
      assertEquals(1792.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals((-2071), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('%', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional0.getEmail());
      
      List<Atividade> list0 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, (Predicate<Atividade>) null);
      assertNotNull(list0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = (UtilizadorPraticanteOcasional)utilizadorPraticanteOcasional0.clone();
      assertNotNull(utilizadorPraticanteOcasional1);
      assertNotSame(utilizadorPraticanteOcasional0, utilizadorPraticanteOcasional1);
      assertNotSame(utilizadorPraticanteOcasional1, utilizadorPraticanteOcasional0);
      assertTrue(utilizadorPraticanteOcasional1.equals((Object)utilizadorPraticanteOcasional0));
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional0.getMorada());
      assertEquals(1854, utilizadorPraticanteOcasional0.getAltura());
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional0.getNome());
      assertEquals(1.25, utilizadorPraticanteOcasional0.getFatorMultiplicativo(), 0.01);
      assertEquals(1792.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals((-2071), utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals('%', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional0.getEmail());
      assertEquals(1, utilizadorPraticanteOcasional1.getCodUtilizador());
      assertEquals('%', utilizadorPraticanteOcasional1.getGenero());
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional1.getMorada());
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional1.getEmail());
      assertEquals(1.25, utilizadorPraticanteOcasional1.getFatorMultiplicativo(), 0.01);
      assertEquals(1854, utilizadorPraticanteOcasional1.getAltura());
      assertEquals("\nData de realiza\u00E7ao: ", utilizadorPraticanteOcasional1.getNome());
      assertEquals(1792.0, utilizadorPraticanteOcasional1.getPeso(), 0.01);
      assertEquals((-2071), utilizadorPraticanteOcasional1.getFreqCardiaca());
      
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorPraticanteOcasional0, list0, 2754, 1, 2000.0, localDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      ZoneId zoneId0 = ZoneId.ofOffset("", zoneOffset0);
      assertNotNull(zoneId0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      
      Clock clock0 = MockClock.tickMinutes(zoneId0);
      assertNotNull(clock0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      assertNotNull(localDate0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "lQX;SC(6", "lQX;SC(6", (-4694), (-4694), (-4694), localDate0, 'z');
      assertNotNull(utilizadorAmador0);
      assertEquals((-4694), utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("lQX;SC(6", utilizadorAmador0.getEmail());
      assertEquals((-4694.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('z', utilizadorAmador0.getGenero());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals((-4694), utilizadorAmador0.getAltura());
      assertEquals("lQX;SC(6", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(349);
      assertNotNull(planoTreino0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      assertEquals((-4694), utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("lQX;SC(6", utilizadorAmador0.getEmail());
      assertEquals((-4694.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('z', utilizadorAmador0.getGenero());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals((-4694), utilizadorAmador0.getAltura());
      assertEquals("lQX;SC(6", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, planoTreino0.getCodPlano());
      
      planoTreino0.setProximoCodigo(1863);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      assertEquals((-4694), utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("lQX;SC(6", utilizadorAmador0.getEmail());
      assertEquals((-4694.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('z', utilizadorAmador0.getGenero());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals((-4694), utilizadorAmador0.getAltura());
      assertEquals("lQX;SC(6", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, planoTreino0.getCodPlano());
      
      List<Atividade> list0 = utilizadorAmador0.getAtividadesIsoladas();
      assertNotNull(list0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      assertEquals((-4694), utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("lQX;SC(6", utilizadorAmador0.getEmail());
      assertEquals((-4694.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('z', utilizadorAmador0.getGenero());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals((-4694), utilizadorAmador0.getAltura());
      assertEquals("lQX;SC(6", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      planoTreino0.setDataRealizacao(localDate0);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      assertEquals((-4694), utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("lQX;SC(6", utilizadorAmador0.getEmail());
      assertEquals((-4694.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('z', utilizadorAmador0.getGenero());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals((-4694), utilizadorAmador0.getAltura());
      assertEquals("lQX;SC(6", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, planoTreino0.getCodPlano());
      
      List<PlanoTreino> list1 = planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, (-4694), (-4694), (-4694), localDate0);
      assertNotNull(list1);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      assertFalse(list1.contains(planoTreino0));
      assertEquals((-4694), utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("lQX;SC(6", utilizadorAmador0.getEmail());
      assertEquals((-4694.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('z', utilizadorAmador0.getGenero());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals((-4694), utilizadorAmador0.getAltura());
      assertEquals("lQX;SC(6", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<Atividade> list2 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, (Predicate<Atividade>) null);
      assertNotNull(list2);
      assertSame(zoneOffset0, zoneId0);
      assertSame(zoneId0, zoneOffset0);
      assertNotSame(list2, list0);
      assertTrue(list2.equals((Object)list0));
      assertEquals((-4694), utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals("lQX;SC(6", utilizadorAmador0.getEmail());
      assertEquals((-4694.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals('z', utilizadorAmador0.getGenero());
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals((-4694), utilizadorAmador0.getAltura());
      assertEquals("lQX;SC(6", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      System.setCurrentTimeMillis((-1741L));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      assertNotNull(planoTreino0);
      assertEquals(0, planoTreino0.getCodPlano());
      
      Ciclismo ciclismo0 = new Ciclismo();
      assertNotNull(ciclismo0);
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1855, ciclismo0);
      assertNotNull(planoTreino_AtividadeIteracoes0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      assertNotNull(planoTreino_AtividadeIteracoes1);
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      boolean boolean0 = planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      assertTrue(boolean0);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertTrue(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      planoTreino0.addAtividade(ciclismo0, 1855);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0.0, ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      
      ciclismo0.setDistancia((-300.71340776));
      assertEquals((-300.71340776), ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      assertNotNull(planoTreino1);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino_AtividadeIteracoes1.setIteracoes(1855);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals((-300.71340776), ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      assertNotNull(predicate0);
      
      List<Atividade> list0 = planoTreino1.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      assertNotNull(list0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      int int0 = planoTreino0.compareTo(planoTreino1);
      assertEquals(0, int0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      String string0 = planoTreino_AtividadeIteracoes1.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\nIteracoes: 1855\n", string0);
      assertNotNull(string0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals((-300.71340776), ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      String string1 = planoTreino_AtividadeIteracoes1.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\nIteracoes: 1855\n", string1);
      assertNotNull(string1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals((-300.71340776), ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(1855, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      planoTreino1.setProximoCodigo((-1818));
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino_AtividadeIteracoes1.setIteracoes(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino_AtividadeIteracoes0, planoTreino_AtividadeIteracoes1);
      assertNotSame(planoTreino_AtividadeIteracoes1, planoTreino_AtividadeIteracoes0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertFalse(planoTreino_AtividadeIteracoes0.equals((Object)planoTreino_AtividadeIteracoes1));
      assertFalse(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals((-300.71340776), ciclismo0.getDistancia(), 0.01);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1855, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, planoTreino_AtividadeIteracoes1.getIteracoes());
      
      LocalDate localDate1 = planoTreino1.getDataRealizacao();
      assertNotNull(localDate1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(localDate1, localDate0);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(localDate1.equals((Object)localDate0));
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      int int1 = planoTreino1.getCodPlano();
      assertEquals(0, int1);
      assertNotSame(planoTreino0, planoTreino1);
      assertNotSame(planoTreino1, planoTreino0);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertTrue(int1 == int0);
      assertFalse(planoTreino1.equals((Object)planoTreino0));
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(0, planoTreino1.getCodPlano());
      
      planoTreino0.setProximoCodigo(0);
      assertNotSame(planoTreino0, planoTreino1);
      assertFalse(planoTreino0.equals((Object)planoTreino1));
      assertEquals(0, planoTreino0.getCodPlano());
      
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      assertNotNull(utilizadorAmador0);
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      LocalDate localDate2 = MockLocalDate.now((ZoneId) zoneOffset0);
      assertNotNull(localDate2);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      assertTrue(localDate2.equals((Object)localDate0));
      assertTrue(localDate2.equals((Object)localDate1));
      
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, localDate2, localDate2);
      assertNotNull(utilizadorAmador1);
      assertTrue(localDate2.equals((Object)localDate0));
      assertTrue(localDate2.equals((Object)localDate1));
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals("", utilizadorAmador0.getNome());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(1.0, utilizadorAmador0.getFatorMultiplicativo(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, utilizadorAmador1.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador1.getPeso(), 0.01);
      assertEquals(1.0, utilizadorAmador1.getFatorMultiplicativo(), 0.01);
      assertEquals('\u0000', utilizadorAmador1.getGenero());
      assertEquals(0, utilizadorAmador1.getAltura());
      assertEquals("", utilizadorAmador1.getNome());
      assertEquals(0, utilizadorAmador1.getCodUtilizador());
      assertEquals("", utilizadorAmador1.getEmail());
      assertEquals("", utilizadorAmador1.getMorada());
      
      // Undeclared exception!
      try { 
        planoTreino0.caloriasDispendidas(utilizadorAmador1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Ciclismo ciclismo0 = new Ciclismo();
      int int0 = 0;
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(1855, ciclismo0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      planoTreino_AtividadeIteracoes1.equals(planoTreino_AtividadeIteracoes0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes2 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes1);
      planoTreino0.addAtividade(ciclismo0, 1855);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      planoTreino_AtividadeIteracoes1.setIteracoes(1855);
      planoTreino_AtividadeIteracoes1.setAtividade(ciclismo0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      planoTreino1.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      planoTreino0.compareTo(planoTreino1);
      planoTreino1.toString();
      planoTreino_AtividadeIteracoes1.setIteracoes(0);
      LocalDate localDate1 = planoTreino1.getDataRealizacao();
      planoTreino1.getCodPlano();
      planoTreino0.setProximoCodigo(0);
      planoTreino1.planoTreinoNumPeriodo(localDate0, localDate1);
      planoTreino0.getCodPlano();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        ZoneId.of("n7e6s", (Map<String, String>) hashMap0);
        fail("Expecting exception: ZoneRulesException");
      
      } catch(ZoneRulesException e) {
         //
         // Unknown time-zone ID: n7e6s
         //
         verifyException("java.time.zone.ZoneRulesProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockClock.systemUTC();
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, 10, 1511);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'n';
      charArray0[2] = '8';
      PlanoTreino planoTreino0 = new PlanoTreino();
      Btt btt0 = new Btt();
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
      charArray0[3] = '(';
      charArray0[4] = 'w';
      charArray0[5] = '/';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 77, 70);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
}
