/*
 * This file was automatically generated by EvoSuite
 * Wed May 07 08:59:27 GMT 2025
 */

package Projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Projeto.Abdominais;
import Projeto.Atividade;
import Projeto.BenchPress;
import Projeto.BicepCurls;
import Projeto.Btt;
import Projeto.Ciclismo;
import Projeto.Corrida;
import Projeto.Flexoes;
import Projeto.LegPress;
import Projeto.Trail;
import Projeto.Utilizador;
import Projeto.UtilizadorAmador;
import Projeto.UtilizadorPraticanteOcasional;
import Projeto.UtilizadorProfissional;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Atividade_ESTest extends Atividade_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt();
      int int0 = btt0.compareTo((Atividade) btt1);
      assertEquals((-1), int0);
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(2, btt1.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 1736, 1736, 1736);
      LegPress legPress1 = new LegPress(localDateTime0, localTime0, 1359, 1359, 1359);
      legPress0.equals(legPress1);
      assertEquals(2, legPress1.getCodAtividade());
      assertEquals(1359, legPress1.getFreqCardiaca());
      assertEquals(1736, legPress0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Btt btt0 = new Btt();
      String string0 = btt0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 409, (-1517), 3997.112737);
      int int0 = legPress0.getFreqCardiaca();
      assertEquals(1, legPress0.getCodAtividade());
      assertEquals(409, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      ciclismo0.setFreqCardiaca((-558));
      int int0 = ciclismo0.getFreqCardiaca();
      assertEquals((-558), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(0L);
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, 72, 0L, 72);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      double double0 = trail0.getFatorFreqCardiaca(utilizadorPraticanteOcasional0);
      assertEquals(72, trail0.getFreqCardiaca());
      assertEquals((-0.8), double0, 0.01);
      assertEquals(1, trail0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      flexoes0.setDataRealizacao((LocalDateTime) null);
      flexoes0.getDataRealizacao();
      assertEquals(0, flexoes0.getFreqCardiaca());
      assertEquals(1, flexoes0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setProximoCodigo(0);
      assertEquals(1, btt0.getCodAtividade());
      assertEquals(0, btt0.getFreqCardiaca());
      
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, 0, 1.5);
      int int0 = corrida0.getCodAtividade();
      assertEquals(0, corrida0.getFreqCardiaca());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setProximoCodigo((-780));
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      
      BicepCurls bicepCurls1 = new BicepCurls(localDateTime0, localTime0, 0, 0, 0);
      int int0 = bicepCurls1.getCodAtividade();
      assertEquals(0, bicepCurls1.getFreqCardiaca());
      assertEquals((-780), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      BicepCurls bicepCurls0 = new BicepCurls((LocalDateTime) null, (LocalTime) null, 2490, 1340, 2499.58905);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", (String) null, (String) null, (-2057), (-2057), 448, localDate0, 'e');
      bicepCurls0.setProximoCodigo((-1977));
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorProfissional0, 1833.6065);
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(0, atividade0.getFreqCardiaca());
      assertEquals((-1977), atividade0.getCodAtividade());
      assertEquals(2490, bicepCurls0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      flexoes0.equals(flexoes0);
      assertEquals(0, flexoes0.getFreqCardiaca());
      assertEquals(1, flexoes0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      abdominais0.equals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 1865 bpm\nRepeti\u00E7oes: 0\nTipo de atividade: Abdominais\n");
      assertEquals(1, abdominais0.getCodAtividade());
      assertEquals(0, abdominais0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(19L);
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, 72, 19L, 72);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = trail0.consumoCalorias(utilizadorProfissional0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(72, trail0.getFreqCardiaca());
      assertEquals(1, trail0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setPeso(1736);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 1736, (-1517), 1736);
      double double0 = legPress0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(1, legPress0.getCodAtividade());
      assertEquals(20613.67388888888, double0, 0.01);
      assertEquals(1736, legPress0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, (-2189), (-2189), (-2189));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Utilizador\nCodigo de Utilizador: ", "\nData de realiza\u00E7ao: ", "Utilizador\nCodigo de Utilizador: ", 1722, 1761, (-2189), localDate0, '~');
      double double0 = benchPress0.consumoCalorias(utilizadorAmador0);
      assertEquals((-2189), benchPress0.getFreqCardiaca());
      assertEquals(1, benchPress0.getCodAtividade());
      assertEquals((-2795.459911385381), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1736);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 1736, 1736, 1736);
      int int0 = legPress0.compareTo((Atividade) ciclismo0);
      assertEquals(1736, legPress0.getFreqCardiaca());
      assertEquals(2, legPress0.getCodAtividade());
      assertEquals(1, int0);
      assertEquals(0, ciclismo0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(0L);
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, 72, 0L, 72);
      // Undeclared exception!
      try { 
        trail0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      // Undeclared exception!
      try { 
        flexoes0.getFatorFreqCardiaca((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("Utilizador\nCodigo de Utilizador: ", (String) null, "h$!V8`T;XS_V{Tn=", 2846, 2846, 2846, (LocalDate) null, '+');
      // Undeclared exception!
      try { 
        corrida0.geraAtividade(utilizadorProfissional0, 2846);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setDataRealizacao((LocalDateTime) null);
      BicepCurls bicepCurls1 = new BicepCurls();
      // Undeclared exception!
      try { 
        bicepCurls0.equals(bicepCurls1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Btt btt0 = new Btt();
      // Undeclared exception!
      try { 
        btt0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Btt", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        legPress0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Btt btt0 = new Btt();
      // Undeclared exception!
      try { 
        btt0.compareTo((Atividade) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.getTempo();
      assertEquals(1, bicepCurls0.getCodAtividade());
      assertEquals(0, bicepCurls0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      flexoes0.getDataRealizacao();
      assertEquals(1, flexoes0.getCodAtividade());
      assertEquals(0, flexoes0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, 0, 1.5);
      int int0 = corrida0.getCodAtividade();
      assertEquals(0, corrida0.getFreqCardiaca());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      int int0 = legPress0.getFreqCardiaca();
      assertEquals(0, int0);
      assertEquals(1, legPress0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setTempo((LocalTime) null);
      bicepCurls0.getTempo();
      assertEquals(0, bicepCurls0.getFreqCardiaca());
      assertEquals(1, bicepCurls0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-775));
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, (-775), (-775), (-775));
      int int0 = legPress0.compareTo((Atividade) ciclismo0);
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(2, legPress0.getCodAtividade());
      assertEquals((-1), int0);
      assertEquals((-775), legPress0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-775));
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, (-775), (-775), (-775));
      LegPress legPress1 = new LegPress(localDateTime0, localTime0, 1359, 1359, 1359);
      legPress0.equals(legPress1);
      assertEquals(2, legPress1.getCodAtividade());
      assertEquals(1359, legPress1.getFreqCardiaca());
      assertEquals((-775), legPress0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls();
      BicepCurls bicepCurls1 = new BicepCurls(localDateTime0, localTime0, 0, 0, 0);
      boolean boolean0 = bicepCurls0.equals(bicepCurls1);
      assertEquals(2, bicepCurls1.getCodAtividade());
      assertEquals(0, bicepCurls1.getFreqCardiaca());
      assertFalse(boolean0);
      assertEquals(0, bicepCurls0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setProximoCodigo(0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Atividade atividade0 = btt0.geraAtividade(utilizadorPraticanteOcasional0, 0);
      assertEquals(0, atividade0.getCodAtividade());
      assertTrue(atividade0.equals((Object)btt0));
      assertEquals(1, btt0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setDataRealizacao((LocalDateTime) null);
      BicepCurls bicepCurls1 = new BicepCurls();
      boolean boolean0 = bicepCurls1.equals(bicepCurls0);
      assertEquals(2, bicepCurls1.getCodAtividade());
      assertFalse(boolean0);
      assertEquals(0, bicepCurls1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = (Corrida)corrida0.clone();
      boolean boolean0 = corrida0.equals(corrida1);
      assertTrue(boolean0);
      assertEquals(1, corrida0.getCodAtividade());
      assertEquals(1, corrida1.getCodAtividade());
      assertEquals(0, corrida1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        flexoes0.getFatorFreqCardiaca(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("Projeto.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Atividade atividade0 = ciclismo0.geraAtividade(utilizadorPraticanteOcasional0, (-775));
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals(2, atividade0.getCodAtividade());
      assertEquals(0, atividade0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Btt btt0 = new Btt();
      int int0 = btt0.compareTo((Atividade) btt0);
      assertEquals(1, btt0.getCodAtividade());
      assertEquals(0, btt0.getFreqCardiaca());
      assertEquals(0, int0);
  }
}
